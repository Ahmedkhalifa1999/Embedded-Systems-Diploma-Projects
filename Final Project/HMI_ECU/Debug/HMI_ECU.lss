
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002ae4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a8  00800060  00002ae4  00002b78  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  00800108  00800108  00002c20  2**0
                  ALLOC
  3 .stab         00002754  00000000  00000000  00002c20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eff  00000000  00000000  00005374  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006273  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000063b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006523  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000816c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009057  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000a1f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a9bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ee       	ldi	r30, 0xE4	; 228
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 30       	cpi	r26, 0x08	; 8
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e0       	ldi	r26, 0x08	; 8
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 30       	cpi	r26, 0x0B	; 11
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 70 15 	jmp	0x2ae0	; 0x2ae0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 ef       	ldi	r26, 0xF8	; 248
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 10 15 	jmp	0x2a20	; 0x2a20 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 f4 14 	jmp	0x29e8	; 0x29e8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	88 ef       	ldi	r24, 0xF8	; 248
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 10 15 	jmp	0x2a20	; 0x2a20 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 00 15 	jmp	0x2a00	; 0x2a00 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 04 15 	jmp	0x2a08	; 0x2a08 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 20 15 	jmp	0x2a40	; 0x2a40 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
void openDoor();

/* Called when the user chooses the "change password" option in main menu */
void changePassword();

int main(void) {
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	aa 97       	sbiw	r28, 0x2a	; 42
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
	/* Hardware Initialization */
	LCD_init();
     b5a:	0e 94 29 0f 	call	0x1e52	; 0x1e52 <LCD_init>
	UART_config uart = {9600, ONE, NO_PARITY, 8};
     b5e:	9e 01       	movw	r18, r28
     b60:	23 5e       	subi	r18, 0xE3	; 227
     b62:	3f 4f       	sbci	r19, 0xFF	; 255
     b64:	3f a3       	std	Y+39, r19	; 0x27
     b66:	2e a3       	std	Y+38, r18	; 0x26
     b68:	80 e0       	ldi	r24, 0x00	; 0
     b6a:	91 e0       	ldi	r25, 0x01	; 1
     b6c:	99 a7       	std	Y+41, r25	; 0x29
     b6e:	88 a7       	std	Y+40, r24	; 0x28
     b70:	97 e0       	ldi	r25, 0x07	; 7
     b72:	9a a7       	std	Y+42, r25	; 0x2a
     b74:	e8 a5       	ldd	r30, Y+40	; 0x28
     b76:	f9 a5       	ldd	r31, Y+41	; 0x29
     b78:	00 80       	ld	r0, Z
     b7a:	28 a5       	ldd	r18, Y+40	; 0x28
     b7c:	39 a5       	ldd	r19, Y+41	; 0x29
     b7e:	2f 5f       	subi	r18, 0xFF	; 255
     b80:	3f 4f       	sbci	r19, 0xFF	; 255
     b82:	39 a7       	std	Y+41, r19	; 0x29
     b84:	28 a7       	std	Y+40, r18	; 0x28
     b86:	ee a1       	ldd	r30, Y+38	; 0x26
     b88:	ff a1       	ldd	r31, Y+39	; 0x27
     b8a:	00 82       	st	Z, r0
     b8c:	2e a1       	ldd	r18, Y+38	; 0x26
     b8e:	3f a1       	ldd	r19, Y+39	; 0x27
     b90:	2f 5f       	subi	r18, 0xFF	; 255
     b92:	3f 4f       	sbci	r19, 0xFF	; 255
     b94:	3f a3       	std	Y+39, r19	; 0x27
     b96:	2e a3       	std	Y+38, r18	; 0x26
     b98:	3a a5       	ldd	r19, Y+42	; 0x2a
     b9a:	31 50       	subi	r19, 0x01	; 1
     b9c:	3a a7       	std	Y+42, r19	; 0x2a
     b9e:	8a a5       	ldd	r24, Y+42	; 0x2a
     ba0:	88 23       	and	r24, r24
     ba2:	41 f7       	brne	.-48     	; 0xb74 <main+0x2e>
	UART_init(&uart);
     ba4:	ce 01       	movw	r24, r28
     ba6:	4d 96       	adiw	r24, 0x1d	; 29
     ba8:	0e 94 e7 13 	call	0x27ce	; 0x27ce <UART_init>

	/* Software Initialization */
	if (UART_receiveByte() == 0x01) {
     bac:	0e 94 54 14 	call	0x28a8	; 0x28a8 <UART_receiveByte>
     bb0:	81 30       	cpi	r24, 0x01	; 1
     bb2:	11 f4       	brne	.+4      	; 0xbb8 <main+0x72>
		/* if the Control MCU sends 0x01 on the UART, this means that there is no previous password saved,
		 * and thus HMI MCU will go into First Startup Sequence
		 */
		firstStartup();
     bb4:	0e 94 c0 07 	call	0xf80	; 0xf80 <firstStartup>

	while(1) {
		/* Normal Operation Sequence
		 * Waiting for user to choose an option
		 */
		LCD_clearScreen();
     bb8:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_clearScreen>
		LCD_displayString("+ : Open Door");
     bbc:	80 e6       	ldi	r24, 0x60	; 96
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>
		LCD_moveCursor(1, 0);
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	60 e0       	ldi	r22, 0x00	; 0
     bc8:	0e 94 5f 13 	call	0x26be	; 0x26be <LCD_moveCursor>
		LCD_displayString("- : Change Pass");
     bcc:	8e e6       	ldi	r24, 0x6E	; 110
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>
		switch (KEYPAD_getPressedKey()) {
     bd4:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <KEYPAD_getPressedKey>
     bd8:	e8 2f       	mov	r30, r24
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	fd a3       	std	Y+37, r31	; 0x25
     bde:	ec a3       	std	Y+36, r30	; 0x24
     be0:	2c a1       	ldd	r18, Y+36	; 0x24
     be2:	3d a1       	ldd	r19, Y+37	; 0x25
     be4:	2b 32       	cpi	r18, 0x2B	; 43
     be6:	31 05       	cpc	r19, r1
     be8:	39 f0       	breq	.+14     	; 0xbf8 <main+0xb2>
     bea:	8c a1       	ldd	r24, Y+36	; 0x24
     bec:	9d a1       	ldd	r25, Y+37	; 0x25
     bee:	8d 32       	cpi	r24, 0x2D	; 45
     bf0:	91 05       	cpc	r25, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <main+0xb0>
     bf4:	76 c0       	rjmp	.+236    	; 0xce2 <main+0x19c>
     bf6:	e0 cf       	rjmp	.-64     	; 0xbb8 <main+0x72>
     bf8:	80 e0       	ldi	r24, 0x00	; 0
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	aa ef       	ldi	r26, 0xFA	; 250
     bfe:	b3 e4       	ldi	r27, 0x43	; 67
     c00:	89 8f       	std	Y+25, r24	; 0x19
     c02:	9a 8f       	std	Y+26, r25	; 0x1a
     c04:	ab 8f       	std	Y+27, r26	; 0x1b
     c06:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c08:	69 8d       	ldd	r22, Y+25	; 0x19
     c0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c10:	20 e0       	ldi	r18, 0x00	; 0
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	4a ef       	ldi	r20, 0xFA	; 250
     c16:	54 e4       	ldi	r21, 0x44	; 68
     c18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1c:	dc 01       	movw	r26, r24
     c1e:	cb 01       	movw	r24, r22
     c20:	8d 8b       	std	Y+21, r24	; 0x15
     c22:	9e 8b       	std	Y+22, r25	; 0x16
     c24:	af 8b       	std	Y+23, r26	; 0x17
     c26:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c28:	6d 89       	ldd	r22, Y+21	; 0x15
     c2a:	7e 89       	ldd	r23, Y+22	; 0x16
     c2c:	8f 89       	ldd	r24, Y+23	; 0x17
     c2e:	98 8d       	ldd	r25, Y+24	; 0x18
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	30 e0       	ldi	r19, 0x00	; 0
     c34:	40 e8       	ldi	r20, 0x80	; 128
     c36:	5f e3       	ldi	r21, 0x3F	; 63
     c38:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c3c:	88 23       	and	r24, r24
     c3e:	2c f4       	brge	.+10     	; 0xc4a <main+0x104>
		__ticks = 1;
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	9c 8b       	std	Y+20, r25	; 0x14
     c46:	8b 8b       	std	Y+19, r24	; 0x13
     c48:	3f c0       	rjmp	.+126    	; 0xcc8 <main+0x182>
	else if (__tmp > 65535)
     c4a:	6d 89       	ldd	r22, Y+21	; 0x15
     c4c:	7e 89       	ldd	r23, Y+22	; 0x16
     c4e:	8f 89       	ldd	r24, Y+23	; 0x17
     c50:	98 8d       	ldd	r25, Y+24	; 0x18
     c52:	20 e0       	ldi	r18, 0x00	; 0
     c54:	3f ef       	ldi	r19, 0xFF	; 255
     c56:	4f e7       	ldi	r20, 0x7F	; 127
     c58:	57 e4       	ldi	r21, 0x47	; 71
     c5a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c5e:	18 16       	cp	r1, r24
     c60:	4c f5       	brge	.+82     	; 0xcb4 <main+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c62:	69 8d       	ldd	r22, Y+25	; 0x19
     c64:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c66:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c68:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e2       	ldi	r20, 0x20	; 32
     c70:	51 e4       	ldi	r21, 0x41	; 65
     c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	bc 01       	movw	r22, r24
     c7c:	cd 01       	movw	r24, r26
     c7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c82:	dc 01       	movw	r26, r24
     c84:	cb 01       	movw	r24, r22
     c86:	9c 8b       	std	Y+20, r25	; 0x14
     c88:	8b 8b       	std	Y+19, r24	; 0x13
     c8a:	0f c0       	rjmp	.+30     	; 0xcaa <main+0x164>
     c8c:	88 ec       	ldi	r24, 0xC8	; 200
     c8e:	90 e0       	ldi	r25, 0x00	; 0
     c90:	9a 8b       	std	Y+18, r25	; 0x12
     c92:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c94:	89 89       	ldd	r24, Y+17	; 0x11
     c96:	9a 89       	ldd	r25, Y+18	; 0x12
     c98:	01 97       	sbiw	r24, 0x01	; 1
     c9a:	f1 f7       	brne	.-4      	; 0xc98 <main+0x152>
     c9c:	9a 8b       	std	Y+18, r25	; 0x12
     c9e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ca0:	8b 89       	ldd	r24, Y+19	; 0x13
     ca2:	9c 89       	ldd	r25, Y+20	; 0x14
     ca4:	01 97       	sbiw	r24, 0x01	; 1
     ca6:	9c 8b       	std	Y+20, r25	; 0x14
     ca8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     caa:	8b 89       	ldd	r24, Y+19	; 0x13
     cac:	9c 89       	ldd	r25, Y+20	; 0x14
     cae:	00 97       	sbiw	r24, 0x00	; 0
     cb0:	69 f7       	brne	.-38     	; 0xc8c <main+0x146>
     cb2:	14 c0       	rjmp	.+40     	; 0xcdc <main+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cb4:	6d 89       	ldd	r22, Y+21	; 0x15
     cb6:	7e 89       	ldd	r23, Y+22	; 0x16
     cb8:	8f 89       	ldd	r24, Y+23	; 0x17
     cba:	98 8d       	ldd	r25, Y+24	; 0x18
     cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc0:	dc 01       	movw	r26, r24
     cc2:	cb 01       	movw	r24, r22
     cc4:	9c 8b       	std	Y+20, r25	; 0x14
     cc6:	8b 8b       	std	Y+19, r24	; 0x13
     cc8:	8b 89       	ldd	r24, Y+19	; 0x13
     cca:	9c 89       	ldd	r25, Y+20	; 0x14
     ccc:	98 8b       	std	Y+16, r25	; 0x10
     cce:	8f 87       	std	Y+15, r24	; 0x0f
     cd0:	8f 85       	ldd	r24, Y+15	; 0x0f
     cd2:	98 89       	ldd	r25, Y+16	; 0x10
     cd4:	01 97       	sbiw	r24, 0x01	; 1
     cd6:	f1 f7       	brne	.-4      	; 0xcd4 <main+0x18e>
     cd8:	98 8b       	std	Y+16, r25	; 0x10
     cda:	8f 87       	std	Y+15, r24	; 0x0f
		case '+' :
			_delay_ms(500);
			openDoor();
     cdc:	0e 94 99 08 	call	0x1132	; 0x1132 <openDoor>
     ce0:	6b cf       	rjmp	.-298    	; 0xbb8 <main+0x72>
			break;
     ce2:	80 e0       	ldi	r24, 0x00	; 0
     ce4:	90 e0       	ldi	r25, 0x00	; 0
     ce6:	aa ef       	ldi	r26, 0xFA	; 250
     ce8:	b3 e4       	ldi	r27, 0x43	; 67
     cea:	8b 87       	std	Y+11, r24	; 0x0b
     cec:	9c 87       	std	Y+12, r25	; 0x0c
     cee:	ad 87       	std	Y+13, r26	; 0x0d
     cf0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cf2:	6b 85       	ldd	r22, Y+11	; 0x0b
     cf4:	7c 85       	ldd	r23, Y+12	; 0x0c
     cf6:	8d 85       	ldd	r24, Y+13	; 0x0d
     cf8:	9e 85       	ldd	r25, Y+14	; 0x0e
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	4a ef       	ldi	r20, 0xFA	; 250
     d00:	54 e4       	ldi	r21, 0x44	; 68
     d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d06:	dc 01       	movw	r26, r24
     d08:	cb 01       	movw	r24, r22
     d0a:	8f 83       	std	Y+7, r24	; 0x07
     d0c:	98 87       	std	Y+8, r25	; 0x08
     d0e:	a9 87       	std	Y+9, r26	; 0x09
     d10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     d12:	6f 81       	ldd	r22, Y+7	; 0x07
     d14:	78 85       	ldd	r23, Y+8	; 0x08
     d16:	89 85       	ldd	r24, Y+9	; 0x09
     d18:	9a 85       	ldd	r25, Y+10	; 0x0a
     d1a:	20 e0       	ldi	r18, 0x00	; 0
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	40 e8       	ldi	r20, 0x80	; 128
     d20:	5f e3       	ldi	r21, 0x3F	; 63
     d22:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d26:	88 23       	and	r24, r24
     d28:	2c f4       	brge	.+10     	; 0xd34 <main+0x1ee>
		__ticks = 1;
     d2a:	81 e0       	ldi	r24, 0x01	; 1
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	9e 83       	std	Y+6, r25	; 0x06
     d30:	8d 83       	std	Y+5, r24	; 0x05
     d32:	3f c0       	rjmp	.+126    	; 0xdb2 <main+0x26c>
	else if (__tmp > 65535)
     d34:	6f 81       	ldd	r22, Y+7	; 0x07
     d36:	78 85       	ldd	r23, Y+8	; 0x08
     d38:	89 85       	ldd	r24, Y+9	; 0x09
     d3a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d3c:	20 e0       	ldi	r18, 0x00	; 0
     d3e:	3f ef       	ldi	r19, 0xFF	; 255
     d40:	4f e7       	ldi	r20, 0x7F	; 127
     d42:	57 e4       	ldi	r21, 0x47	; 71
     d44:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d48:	18 16       	cp	r1, r24
     d4a:	4c f5       	brge	.+82     	; 0xd9e <main+0x258>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     d4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     d50:	8d 85       	ldd	r24, Y+13	; 0x0d
     d52:	9e 85       	ldd	r25, Y+14	; 0x0e
     d54:	20 e0       	ldi	r18, 0x00	; 0
     d56:	30 e0       	ldi	r19, 0x00	; 0
     d58:	40 e2       	ldi	r20, 0x20	; 32
     d5a:	51 e4       	ldi	r21, 0x41	; 65
     d5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d60:	dc 01       	movw	r26, r24
     d62:	cb 01       	movw	r24, r22
     d64:	bc 01       	movw	r22, r24
     d66:	cd 01       	movw	r24, r26
     d68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d6c:	dc 01       	movw	r26, r24
     d6e:	cb 01       	movw	r24, r22
     d70:	9e 83       	std	Y+6, r25	; 0x06
     d72:	8d 83       	std	Y+5, r24	; 0x05
     d74:	0f c0       	rjmp	.+30     	; 0xd94 <main+0x24e>
     d76:	88 ec       	ldi	r24, 0xC8	; 200
     d78:	90 e0       	ldi	r25, 0x00	; 0
     d7a:	9c 83       	std	Y+4, r25	; 0x04
     d7c:	8b 83       	std	Y+3, r24	; 0x03
     d7e:	8b 81       	ldd	r24, Y+3	; 0x03
     d80:	9c 81       	ldd	r25, Y+4	; 0x04
     d82:	01 97       	sbiw	r24, 0x01	; 1
     d84:	f1 f7       	brne	.-4      	; 0xd82 <main+0x23c>
     d86:	9c 83       	std	Y+4, r25	; 0x04
     d88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d8a:	8d 81       	ldd	r24, Y+5	; 0x05
     d8c:	9e 81       	ldd	r25, Y+6	; 0x06
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	9e 83       	std	Y+6, r25	; 0x06
     d92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d94:	8d 81       	ldd	r24, Y+5	; 0x05
     d96:	9e 81       	ldd	r25, Y+6	; 0x06
     d98:	00 97       	sbiw	r24, 0x00	; 0
     d9a:	69 f7       	brne	.-38     	; 0xd76 <main+0x230>
     d9c:	14 c0       	rjmp	.+40     	; 0xdc6 <main+0x280>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d9e:	6f 81       	ldd	r22, Y+7	; 0x07
     da0:	78 85       	ldd	r23, Y+8	; 0x08
     da2:	89 85       	ldd	r24, Y+9	; 0x09
     da4:	9a 85       	ldd	r25, Y+10	; 0x0a
     da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     daa:	dc 01       	movw	r26, r24
     dac:	cb 01       	movw	r24, r22
     dae:	9e 83       	std	Y+6, r25	; 0x06
     db0:	8d 83       	std	Y+5, r24	; 0x05
     db2:	8d 81       	ldd	r24, Y+5	; 0x05
     db4:	9e 81       	ldd	r25, Y+6	; 0x06
     db6:	9a 83       	std	Y+2, r25	; 0x02
     db8:	89 83       	std	Y+1, r24	; 0x01
     dba:	89 81       	ldd	r24, Y+1	; 0x01
     dbc:	9a 81       	ldd	r25, Y+2	; 0x02
     dbe:	01 97       	sbiw	r24, 0x01	; 1
     dc0:	f1 f7       	brne	.-4      	; 0xdbe <main+0x278>
     dc2:	9a 83       	std	Y+2, r25	; 0x02
     dc4:	89 83       	std	Y+1, r24	; 0x01
		case '-' :
			_delay_ms(500);
			changePassword();
     dc6:	0e 94 69 09 	call	0x12d2	; 0x12d2 <changePassword>
     dca:	f6 ce       	rjmp	.-532    	; 0xbb8 <main+0x72>

00000dcc <checkPassword>:

/* -Sends passed password to Control ECU using UART
 * -Waits for Control ECU response regarding password
 * -returns whether password is correct or not
 */
boolean checkPassword(uint8* pass) {
     dcc:	df 93       	push	r29
     dce:	cf 93       	push	r28
     dd0:	00 d0       	rcall	.+0      	; 0xdd2 <checkPassword+0x6>
     dd2:	cd b7       	in	r28, 0x3d	; 61
     dd4:	de b7       	in	r29, 0x3e	; 62
     dd6:	9a 83       	std	Y+2, r25	; 0x02
     dd8:	89 83       	std	Y+1, r24	; 0x01
	UART_sendByte(0x05); /* Send command to Control ECU requesting a password check */
     dda:	85 e0       	ldi	r24, 0x05	; 5
     ddc:	0e 94 3d 14 	call	0x287a	; 0x287a <UART_sendByte>
	UART_sendString(pass); /* Send password to Control ECU */
     de0:	89 81       	ldd	r24, Y+1	; 0x01
     de2:	9a 81       	ldd	r25, Y+2	; 0x02
     de4:	0e 94 63 14 	call	0x28c6	; 0x28c6 <UART_sendString>
	return UART_receiveByte(); /* Receive password check result from Control ECU and return it to caller */
     de8:	0e 94 54 14 	call	0x28a8	; 0x28a8 <UART_receiveByte>
}
     dec:	0f 90       	pop	r0
     dee:	0f 90       	pop	r0
     df0:	cf 91       	pop	r28
     df2:	df 91       	pop	r29
     df4:	08 95       	ret

00000df6 <getPassword>:

/* Gets password from user using keypad and saves it to passed array */
void getPassword(uint8* pass) {
     df6:	df 93       	push	r29
     df8:	cf 93       	push	r28
     dfa:	cd b7       	in	r28, 0x3d	; 61
     dfc:	de b7       	in	r29, 0x3e	; 62
     dfe:	63 97       	sbiw	r28, 0x13	; 19
     e00:	0f b6       	in	r0, 0x3f	; 63
     e02:	f8 94       	cli
     e04:	de bf       	out	0x3e, r29	; 62
     e06:	0f be       	out	0x3f, r0	; 63
     e08:	cd bf       	out	0x3d, r28	; 61
     e0a:	9b 8b       	std	Y+19, r25	; 0x13
     e0c:	8a 8b       	std	Y+18, r24	; 0x12
	uint8 key;
	for (int i = 0; i < 16 /* Maximum password length */; i++) {
     e0e:	18 8a       	std	Y+16, r1	; 0x10
     e10:	1f 86       	std	Y+15, r1	; 0x0f
     e12:	93 c0       	rjmp	.+294    	; 0xf3a <getPassword+0x144>
		key = KEYPAD_getPressedKey();
     e14:	0e 94 31 0e 	call	0x1c62	; 0x1c62 <KEYPAD_getPressedKey>
     e18:	89 8b       	std	Y+17, r24	; 0x11
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	aa ef       	ldi	r26, 0xFA	; 250
     e20:	b3 e4       	ldi	r27, 0x43	; 67
     e22:	8b 87       	std	Y+11, r24	; 0x0b
     e24:	9c 87       	std	Y+12, r25	; 0x0c
     e26:	ad 87       	std	Y+13, r26	; 0x0d
     e28:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e2a:	6b 85       	ldd	r22, Y+11	; 0x0b
     e2c:	7c 85       	ldd	r23, Y+12	; 0x0c
     e2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     e30:	9e 85       	ldd	r25, Y+14	; 0x0e
     e32:	20 e0       	ldi	r18, 0x00	; 0
     e34:	30 e0       	ldi	r19, 0x00	; 0
     e36:	4a ef       	ldi	r20, 0xFA	; 250
     e38:	54 e4       	ldi	r21, 0x44	; 68
     e3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	8f 83       	std	Y+7, r24	; 0x07
     e44:	98 87       	std	Y+8, r25	; 0x08
     e46:	a9 87       	std	Y+9, r26	; 0x09
     e48:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     e4a:	6f 81       	ldd	r22, Y+7	; 0x07
     e4c:	78 85       	ldd	r23, Y+8	; 0x08
     e4e:	89 85       	ldd	r24, Y+9	; 0x09
     e50:	9a 85       	ldd	r25, Y+10	; 0x0a
     e52:	20 e0       	ldi	r18, 0x00	; 0
     e54:	30 e0       	ldi	r19, 0x00	; 0
     e56:	40 e8       	ldi	r20, 0x80	; 128
     e58:	5f e3       	ldi	r21, 0x3F	; 63
     e5a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e5e:	88 23       	and	r24, r24
     e60:	2c f4       	brge	.+10     	; 0xe6c <getPassword+0x76>
		__ticks = 1;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	9e 83       	std	Y+6, r25	; 0x06
     e68:	8d 83       	std	Y+5, r24	; 0x05
     e6a:	3f c0       	rjmp	.+126    	; 0xeea <getPassword+0xf4>
	else if (__tmp > 65535)
     e6c:	6f 81       	ldd	r22, Y+7	; 0x07
     e6e:	78 85       	ldd	r23, Y+8	; 0x08
     e70:	89 85       	ldd	r24, Y+9	; 0x09
     e72:	9a 85       	ldd	r25, Y+10	; 0x0a
     e74:	20 e0       	ldi	r18, 0x00	; 0
     e76:	3f ef       	ldi	r19, 0xFF	; 255
     e78:	4f e7       	ldi	r20, 0x7F	; 127
     e7a:	57 e4       	ldi	r21, 0x47	; 71
     e7c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e80:	18 16       	cp	r1, r24
     e82:	4c f5       	brge	.+82     	; 0xed6 <getPassword+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e84:	6b 85       	ldd	r22, Y+11	; 0x0b
     e86:	7c 85       	ldd	r23, Y+12	; 0x0c
     e88:	8d 85       	ldd	r24, Y+13	; 0x0d
     e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	40 e2       	ldi	r20, 0x20	; 32
     e92:	51 e4       	ldi	r21, 0x41	; 65
     e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	bc 01       	movw	r22, r24
     e9e:	cd 01       	movw	r24, r26
     ea0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea4:	dc 01       	movw	r26, r24
     ea6:	cb 01       	movw	r24, r22
     ea8:	9e 83       	std	Y+6, r25	; 0x06
     eaa:	8d 83       	std	Y+5, r24	; 0x05
     eac:	0f c0       	rjmp	.+30     	; 0xecc <getPassword+0xd6>
     eae:	88 ec       	ldi	r24, 0xC8	; 200
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	9c 83       	std	Y+4, r25	; 0x04
     eb4:	8b 83       	std	Y+3, r24	; 0x03
     eb6:	8b 81       	ldd	r24, Y+3	; 0x03
     eb8:	9c 81       	ldd	r25, Y+4	; 0x04
     eba:	01 97       	sbiw	r24, 0x01	; 1
     ebc:	f1 f7       	brne	.-4      	; 0xeba <getPassword+0xc4>
     ebe:	9c 83       	std	Y+4, r25	; 0x04
     ec0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec2:	8d 81       	ldd	r24, Y+5	; 0x05
     ec4:	9e 81       	ldd	r25, Y+6	; 0x06
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	9e 83       	std	Y+6, r25	; 0x06
     eca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ecc:	8d 81       	ldd	r24, Y+5	; 0x05
     ece:	9e 81       	ldd	r25, Y+6	; 0x06
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	69 f7       	brne	.-38     	; 0xeae <getPassword+0xb8>
     ed4:	14 c0       	rjmp	.+40     	; 0xefe <getPassword+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed6:	6f 81       	ldd	r22, Y+7	; 0x07
     ed8:	78 85       	ldd	r23, Y+8	; 0x08
     eda:	89 85       	ldd	r24, Y+9	; 0x09
     edc:	9a 85       	ldd	r25, Y+10	; 0x0a
     ede:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee2:	dc 01       	movw	r26, r24
     ee4:	cb 01       	movw	r24, r22
     ee6:	9e 83       	std	Y+6, r25	; 0x06
     ee8:	8d 83       	std	Y+5, r24	; 0x05
     eea:	8d 81       	ldd	r24, Y+5	; 0x05
     eec:	9e 81       	ldd	r25, Y+6	; 0x06
     eee:	9a 83       	std	Y+2, r25	; 0x02
     ef0:	89 83       	std	Y+1, r24	; 0x01
     ef2:	89 81       	ldd	r24, Y+1	; 0x01
     ef4:	9a 81       	ldd	r25, Y+2	; 0x02
     ef6:	01 97       	sbiw	r24, 0x01	; 1
     ef8:	f1 f7       	brne	.-4      	; 0xef6 <getPassword+0x100>
     efa:	9a 83       	std	Y+2, r25	; 0x02
     efc:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		if (key == 13) { /* If the user presses Enter, add 0 to signify end of password and break */
     efe:	89 89       	ldd	r24, Y+17	; 0x11
     f00:	8d 30       	cpi	r24, 0x0D	; 13
     f02:	49 f4       	brne	.+18     	; 0xf16 <getPassword+0x120>
			pass[i] = 0;
     f04:	8f 85       	ldd	r24, Y+15	; 0x0f
     f06:	98 89       	ldd	r25, Y+16	; 0x10
     f08:	2a 89       	ldd	r18, Y+18	; 0x12
     f0a:	3b 89       	ldd	r19, Y+19	; 0x13
     f0c:	f9 01       	movw	r30, r18
     f0e:	e8 0f       	add	r30, r24
     f10:	f9 1f       	adc	r31, r25
     f12:	10 82       	st	Z, r1
     f14:	18 c0       	rjmp	.+48     	; 0xf46 <getPassword+0x150>
			break;
		}
		LCD_displayCharacter('*'); /* Display asterisks to user to signify key presses recorded */
     f16:	8a e2       	ldi	r24, 0x2A	; 42
     f18:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_displayCharacter>
		pass[i] = key + 48; /* Store the numbers in ASCII format */
     f1c:	2f 85       	ldd	r18, Y+15	; 0x0f
     f1e:	38 89       	ldd	r19, Y+16	; 0x10
     f20:	8a 89       	ldd	r24, Y+18	; 0x12
     f22:	9b 89       	ldd	r25, Y+19	; 0x13
     f24:	fc 01       	movw	r30, r24
     f26:	e2 0f       	add	r30, r18
     f28:	f3 1f       	adc	r31, r19
     f2a:	89 89       	ldd	r24, Y+17	; 0x11
     f2c:	80 5d       	subi	r24, 0xD0	; 208
     f2e:	80 83       	st	Z, r24
}

/* Gets password from user using keypad and saves it to passed array */
void getPassword(uint8* pass) {
	uint8 key;
	for (int i = 0; i < 16 /* Maximum password length */; i++) {
     f30:	8f 85       	ldd	r24, Y+15	; 0x0f
     f32:	98 89       	ldd	r25, Y+16	; 0x10
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	98 8b       	std	Y+16, r25	; 0x10
     f38:	8f 87       	std	Y+15, r24	; 0x0f
     f3a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f3c:	98 89       	ldd	r25, Y+16	; 0x10
     f3e:	80 31       	cpi	r24, 0x10	; 16
     f40:	91 05       	cpc	r25, r1
     f42:	0c f4       	brge	.+2      	; 0xf46 <getPassword+0x150>
     f44:	67 cf       	rjmp	.-306    	; 0xe14 <getPassword+0x1e>
			break;
		}
		LCD_displayCharacter('*'); /* Display asterisks to user to signify key presses recorded */
		pass[i] = key + 48; /* Store the numbers in ASCII format */
	}
}
     f46:	63 96       	adiw	r28, 0x13	; 19
     f48:	0f b6       	in	r0, 0x3f	; 63
     f4a:	f8 94       	cli
     f4c:	de bf       	out	0x3e, r29	; 62
     f4e:	0f be       	out	0x3f, r0	; 63
     f50:	cd bf       	out	0x3d, r28	; 61
     f52:	cf 91       	pop	r28
     f54:	df 91       	pop	r29
     f56:	08 95       	ret

00000f58 <soundAlarm>:
/* -Called when 3 consecutive wrong passwords are entered
 * -Sends command to Control ECU signaling intruder alert
 * -Prints "Intruder Alert!" to Screen
 * -Halts Operation of HMI ECU until Control ECU signals that 60 seconds have passed and Alarm is off
 */
void soundAlarm() {
     f58:	df 93       	push	r29
     f5a:	cf 93       	push	r28
     f5c:	cd b7       	in	r28, 0x3d	; 61
     f5e:	de b7       	in	r29, 0x3e	; 62
	UART_sendByte(0xFF); /* Send command to Control ECU signaling intruder alert */
     f60:	8f ef       	ldi	r24, 0xFF	; 255
     f62:	0e 94 3d 14 	call	0x287a	; 0x287a <UART_sendByte>

	/* Print "Intruder Alert!" to Screen */
	LCD_clearScreen();
     f66:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_clearScreen>
	LCD_displayString("Intruder Alert!");
     f6a:	8e e7       	ldi	r24, 0x7E	; 126
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>

	/* Halt Operation of HMI ECU until Control ECU signals that 60 seconds have passed and Alarm is off */
	while (UART_receiveByte() != 0x00);
     f72:	0e 94 54 14 	call	0x28a8	; 0x28a8 <UART_receiveByte>
     f76:	88 23       	and	r24, r24
     f78:	e1 f7       	brne	.-8      	; 0xf72 <soundAlarm+0x1a>
}
     f7a:	cf 91       	pop	r28
     f7c:	df 91       	pop	r29
     f7e:	08 95       	ret

00000f80 <firstStartup>:

/* -Called on first startup to configure new password
 * -Gets password from User
 * -Sends Password to Control ECU
 */
void firstStartup() {
     f80:	df 93       	push	r29
     f82:	cf 93       	push	r28
     f84:	cd b7       	in	r28, 0x3d	; 61
     f86:	de b7       	in	r29, 0x3e	; 62
     f88:	e0 97       	sbiw	r28, 0x30	; 48
     f8a:	0f b6       	in	r0, 0x3f	; 63
     f8c:	f8 94       	cli
     f8e:	de bf       	out	0x3e, r29	; 62
     f90:	0f be       	out	0x3f, r0	; 63
     f92:	cd bf       	out	0x3d, r28	; 61
	uint8 pass1[16];
	uint8 pass2[16];

	/* Get Password from User */
	LCD_clearScreen();
     f94:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_clearScreen>
	LCD_displayString("New Password:");
     f98:	8e e8       	ldi	r24, 0x8E	; 142
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>
	LCD_moveCursor(1, 0);
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	0e 94 5f 13 	call	0x26be	; 0x26be <LCD_moveCursor>
	getPassword(pass1);
     fa8:	ce 01       	movw	r24, r28
     faa:	41 96       	adiw	r24, 0x11	; 17
     fac:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <getPassword>

	/* Get password a second time from the user */
	LCD_clearScreen();
     fb0:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_clearScreen>
	LCD_displayString("Again:");
     fb4:	8c e9       	ldi	r24, 0x9C	; 156
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>
	LCD_moveCursor(1, 0);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	0e 94 5f 13 	call	0x26be	; 0x26be <LCD_moveCursor>
	getPassword(pass2);
     fc4:	ce 01       	movw	r24, r28
     fc6:	81 96       	adiw	r24, 0x21	; 33
     fc8:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <getPassword>

	/* Check for password mismatch */
	for (int i = 0; i < 16; i++) {
     fcc:	18 8a       	std	Y+16, r1	; 0x10
     fce:	1f 86       	std	Y+15, r1	; 0x0f
     fd0:	9d c0       	rjmp	.+314    	; 0x110c <firstStartup+0x18c>
		if (pass1[i] != pass2[i]) {
     fd2:	2f 85       	ldd	r18, Y+15	; 0x0f
     fd4:	38 89       	ldd	r19, Y+16	; 0x10
     fd6:	ce 01       	movw	r24, r28
     fd8:	41 96       	adiw	r24, 0x11	; 17
     fda:	fc 01       	movw	r30, r24
     fdc:	e2 0f       	add	r30, r18
     fde:	f3 1f       	adc	r31, r19
     fe0:	40 81       	ld	r20, Z
     fe2:	2f 85       	ldd	r18, Y+15	; 0x0f
     fe4:	38 89       	ldd	r19, Y+16	; 0x10
     fe6:	ce 01       	movw	r24, r28
     fe8:	81 96       	adiw	r24, 0x21	; 33
     fea:	fc 01       	movw	r30, r24
     fec:	e2 0f       	add	r30, r18
     fee:	f3 1f       	adc	r31, r19
     ff0:	80 81       	ld	r24, Z
     ff2:	48 17       	cp	r20, r24
     ff4:	09 f4       	brne	.+2      	; 0xff8 <firstStartup+0x78>
     ff6:	7b c0       	rjmp	.+246    	; 0x10ee <firstStartup+0x16e>
			LCD_clearScreen();
     ff8:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_clearScreen>
			LCD_displayString("Mismatch");
     ffc:	83 ea       	ldi	r24, 0xA3	; 163
     ffe:	90 e0       	ldi	r25, 0x00	; 0
    1000:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>
    1004:	80 e0       	ldi	r24, 0x00	; 0
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	aa ef       	ldi	r26, 0xFA	; 250
    100a:	b4 e4       	ldi	r27, 0x44	; 68
    100c:	8b 87       	std	Y+11, r24	; 0x0b
    100e:	9c 87       	std	Y+12, r25	; 0x0c
    1010:	ad 87       	std	Y+13, r26	; 0x0d
    1012:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1014:	6b 85       	ldd	r22, Y+11	; 0x0b
    1016:	7c 85       	ldd	r23, Y+12	; 0x0c
    1018:	8d 85       	ldd	r24, Y+13	; 0x0d
    101a:	9e 85       	ldd	r25, Y+14	; 0x0e
    101c:	20 e0       	ldi	r18, 0x00	; 0
    101e:	30 e0       	ldi	r19, 0x00	; 0
    1020:	4a ef       	ldi	r20, 0xFA	; 250
    1022:	54 e4       	ldi	r21, 0x44	; 68
    1024:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1028:	dc 01       	movw	r26, r24
    102a:	cb 01       	movw	r24, r22
    102c:	8f 83       	std	Y+7, r24	; 0x07
    102e:	98 87       	std	Y+8, r25	; 0x08
    1030:	a9 87       	std	Y+9, r26	; 0x09
    1032:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1034:	6f 81       	ldd	r22, Y+7	; 0x07
    1036:	78 85       	ldd	r23, Y+8	; 0x08
    1038:	89 85       	ldd	r24, Y+9	; 0x09
    103a:	9a 85       	ldd	r25, Y+10	; 0x0a
    103c:	20 e0       	ldi	r18, 0x00	; 0
    103e:	30 e0       	ldi	r19, 0x00	; 0
    1040:	40 e8       	ldi	r20, 0x80	; 128
    1042:	5f e3       	ldi	r21, 0x3F	; 63
    1044:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1048:	88 23       	and	r24, r24
    104a:	2c f4       	brge	.+10     	; 0x1056 <firstStartup+0xd6>
		__ticks = 1;
    104c:	81 e0       	ldi	r24, 0x01	; 1
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	9e 83       	std	Y+6, r25	; 0x06
    1052:	8d 83       	std	Y+5, r24	; 0x05
    1054:	3f c0       	rjmp	.+126    	; 0x10d4 <firstStartup+0x154>
	else if (__tmp > 65535)
    1056:	6f 81       	ldd	r22, Y+7	; 0x07
    1058:	78 85       	ldd	r23, Y+8	; 0x08
    105a:	89 85       	ldd	r24, Y+9	; 0x09
    105c:	9a 85       	ldd	r25, Y+10	; 0x0a
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	3f ef       	ldi	r19, 0xFF	; 255
    1062:	4f e7       	ldi	r20, 0x7F	; 127
    1064:	57 e4       	ldi	r21, 0x47	; 71
    1066:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    106a:	18 16       	cp	r1, r24
    106c:	4c f5       	brge	.+82     	; 0x10c0 <firstStartup+0x140>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    106e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1070:	7c 85       	ldd	r23, Y+12	; 0x0c
    1072:	8d 85       	ldd	r24, Y+13	; 0x0d
    1074:	9e 85       	ldd	r25, Y+14	; 0x0e
    1076:	20 e0       	ldi	r18, 0x00	; 0
    1078:	30 e0       	ldi	r19, 0x00	; 0
    107a:	40 e2       	ldi	r20, 0x20	; 32
    107c:	51 e4       	ldi	r21, 0x41	; 65
    107e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	bc 01       	movw	r22, r24
    1088:	cd 01       	movw	r24, r26
    108a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	9e 83       	std	Y+6, r25	; 0x06
    1094:	8d 83       	std	Y+5, r24	; 0x05
    1096:	0f c0       	rjmp	.+30     	; 0x10b6 <firstStartup+0x136>
    1098:	88 ec       	ldi	r24, 0xC8	; 200
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	9c 83       	std	Y+4, r25	; 0x04
    109e:	8b 83       	std	Y+3, r24	; 0x03
    10a0:	8b 81       	ldd	r24, Y+3	; 0x03
    10a2:	9c 81       	ldd	r25, Y+4	; 0x04
    10a4:	01 97       	sbiw	r24, 0x01	; 1
    10a6:	f1 f7       	brne	.-4      	; 0x10a4 <firstStartup+0x124>
    10a8:	9c 83       	std	Y+4, r25	; 0x04
    10aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10ac:	8d 81       	ldd	r24, Y+5	; 0x05
    10ae:	9e 81       	ldd	r25, Y+6	; 0x06
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	9e 83       	std	Y+6, r25	; 0x06
    10b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10b6:	8d 81       	ldd	r24, Y+5	; 0x05
    10b8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ba:	00 97       	sbiw	r24, 0x00	; 0
    10bc:	69 f7       	brne	.-38     	; 0x1098 <firstStartup+0x118>
    10be:	14 c0       	rjmp	.+40     	; 0x10e8 <firstStartup+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10c0:	6f 81       	ldd	r22, Y+7	; 0x07
    10c2:	78 85       	ldd	r23, Y+8	; 0x08
    10c4:	89 85       	ldd	r24, Y+9	; 0x09
    10c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	9e 83       	std	Y+6, r25	; 0x06
    10d2:	8d 83       	std	Y+5, r24	; 0x05
    10d4:	8d 81       	ldd	r24, Y+5	; 0x05
    10d6:	9e 81       	ldd	r25, Y+6	; 0x06
    10d8:	9a 83       	std	Y+2, r25	; 0x02
    10da:	89 83       	std	Y+1, r24	; 0x01
    10dc:	89 81       	ldd	r24, Y+1	; 0x01
    10de:	9a 81       	ldd	r25, Y+2	; 0x02
    10e0:	01 97       	sbiw	r24, 0x01	; 1
    10e2:	f1 f7       	brne	.-4      	; 0x10e0 <firstStartup+0x160>
    10e4:	9a 83       	std	Y+2, r25	; 0x02
    10e6:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2000);
			firstStartup(); /* call function again to re-get password */
    10e8:	0e 94 c0 07 	call	0xf80	; 0xf80 <firstStartup>
    10ec:	19 c0       	rjmp	.+50     	; 0x1120 <firstStartup+0x1a0>
			return;
		}
		if (pass1[i] == 0) break;
    10ee:	2f 85       	ldd	r18, Y+15	; 0x0f
    10f0:	38 89       	ldd	r19, Y+16	; 0x10
    10f2:	ce 01       	movw	r24, r28
    10f4:	41 96       	adiw	r24, 0x11	; 17
    10f6:	fc 01       	movw	r30, r24
    10f8:	e2 0f       	add	r30, r18
    10fa:	f3 1f       	adc	r31, r19
    10fc:	80 81       	ld	r24, Z
    10fe:	88 23       	and	r24, r24
    1100:	59 f0       	breq	.+22     	; 0x1118 <firstStartup+0x198>
	LCD_displayString("Again:");
	LCD_moveCursor(1, 0);
	getPassword(pass2);

	/* Check for password mismatch */
	for (int i = 0; i < 16; i++) {
    1102:	8f 85       	ldd	r24, Y+15	; 0x0f
    1104:	98 89       	ldd	r25, Y+16	; 0x10
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	98 8b       	std	Y+16, r25	; 0x10
    110a:	8f 87       	std	Y+15, r24	; 0x0f
    110c:	8f 85       	ldd	r24, Y+15	; 0x0f
    110e:	98 89       	ldd	r25, Y+16	; 0x10
    1110:	80 31       	cpi	r24, 0x10	; 16
    1112:	91 05       	cpc	r25, r1
    1114:	0c f4       	brge	.+2      	; 0x1118 <firstStartup+0x198>
    1116:	5d cf       	rjmp	.-326    	; 0xfd2 <firstStartup+0x52>
		}
		if (pass1[i] == 0) break;
	}

	/* Send password to Control ECU */
	UART_sendString(pass1);
    1118:	ce 01       	movw	r24, r28
    111a:	41 96       	adiw	r24, 0x11	; 17
    111c:	0e 94 63 14 	call	0x28c6	; 0x28c6 <UART_sendString>
}
    1120:	e0 96       	adiw	r28, 0x30	; 48
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	de bf       	out	0x3e, r29	; 62
    1128:	0f be       	out	0x3f, r0	; 63
    112a:	cd bf       	out	0x3d, r28	; 61
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <openDoor>:
 * -Checks password
 * -Waits for Control ECU to open door if password is correct
 * -Increments wrong password counter and calls itself again if password is wrong
 * -Sounds alarm if wrong password counter reaches 3
 */
void openDoor() {
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62
    113a:	6e 97       	sbiw	r28, 0x1e	; 30
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	f8 94       	cli
    1140:	de bf       	out	0x3e, r29	; 62
    1142:	0f be       	out	0x3f, r0	; 63
    1144:	cd bf       	out	0x3d, r28	; 61

	/* Wrong password counter, Static so that it can be used when the function calls itself recursively */
	static uint8 wrongCount = 0;

	/* Get password from User */
	LCD_clearScreen();
    1146:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_clearScreen>
	LCD_displayString("Password:");
    114a:	8c ea       	ldi	r24, 0xAC	; 172
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>
	LCD_moveCursor(1,0);
    1152:	81 e0       	ldi	r24, 0x01	; 1
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	0e 94 5f 13 	call	0x26be	; 0x26be <LCD_moveCursor>
	getPassword(pass);
    115a:	ce 01       	movw	r24, r28
    115c:	0f 96       	adiw	r24, 0x0f	; 15
    115e:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <getPassword>

	/* Check if Password is correct */
	if (checkPassword(pass) == 0x01) {
    1162:	ce 01       	movw	r24, r28
    1164:	0f 96       	adiw	r24, 0x0f	; 15
    1166:	0e 94 e6 06 	call	0xdcc	; 0xdcc <checkPassword>
    116a:	81 30       	cpi	r24, 0x01	; 1
    116c:	09 f5       	brne	.+66     	; 0x11b0 <openDoor+0x7e>
		/* Wait for Control ECU to execute door opening and re-closing procedure and update LCD accordingly */

		/* Wait for Control ECU to finish opening the door */
		LCD_clearScreen();
    116e:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_clearScreen>
		LCD_displayString("Opening Door");
    1172:	86 eb       	ldi	r24, 0xB6	; 182
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>
		while (UART_receiveByte() != 0x0C);
    117a:	0e 94 54 14 	call	0x28a8	; 0x28a8 <UART_receiveByte>
    117e:	8c 30       	cpi	r24, 0x0C	; 12
    1180:	e1 f7       	brne	.-8      	; 0x117a <openDoor+0x48>

		/* Wait for Control ECU to start re-closing the door */
		LCD_clearScreen();
    1182:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_clearScreen>
		LCD_displayString("Door Open");
    1186:	83 ec       	ldi	r24, 0xC3	; 195
    1188:	90 e0       	ldi	r25, 0x00	; 0
    118a:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>
		while (UART_receiveByte() != 0x0C);
    118e:	0e 94 54 14 	call	0x28a8	; 0x28a8 <UART_receiveByte>
    1192:	8c 30       	cpi	r24, 0x0C	; 12
    1194:	e1 f7       	brne	.-8      	; 0x118e <openDoor+0x5c>

		/* Wait for Control ECU to finish closing the door */
		LCD_clearScreen();
    1196:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_clearScreen>
		LCD_displayString("Closing Door");
    119a:	8d ec       	ldi	r24, 0xCD	; 205
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>
		while (UART_receiveByte() != 0x0C);
    11a2:	0e 94 54 14 	call	0x28a8	; 0x28a8 <UART_receiveByte>
    11a6:	8c 30       	cpi	r24, 0x0C	; 12
    11a8:	e1 f7       	brne	.-8      	; 0x11a2 <openDoor+0x70>

		/* Reset wrong password counter for re-use next time */
		wrongCount = 0;
    11aa:	10 92 08 01 	sts	0x0108, r1
    11ae:	88 c0       	rjmp	.+272    	; 0x12c0 <openDoor+0x18e>
	}
	else {
		/* Print Error message to user indicating Wrong Password */
		LCD_clearScreen();
    11b0:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_clearScreen>
		LCD_displayString("Wrong Password!");
    11b4:	8a ed       	ldi	r24, 0xDA	; 218
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>

		/* Increment wrong password counter */
		wrongCount++;
    11bc:	80 91 08 01 	lds	r24, 0x0108
    11c0:	8f 5f       	subi	r24, 0xFF	; 255
    11c2:	80 93 08 01 	sts	0x0108, r24

		/* Check for wrong password count */
		if (wrongCount == 3) {
    11c6:	80 91 08 01 	lds	r24, 0x0108
    11ca:	83 30       	cpi	r24, 0x03	; 3
    11cc:	29 f4       	brne	.+10     	; 0x11d8 <openDoor+0xa6>
			soundAlarm(); /* Sound the Alarm if wrong password count reaches 3 */
    11ce:	0e 94 ac 07 	call	0xf58	; 0xf58 <soundAlarm>
			wrongCount = 0; /* Reset wrong password count for re-use next time */
    11d2:	10 92 08 01 	sts	0x0108, r1
    11d6:	74 c0       	rjmp	.+232    	; 0x12c0 <openDoor+0x18e>
    11d8:	80 e0       	ldi	r24, 0x00	; 0
    11da:	90 e0       	ldi	r25, 0x00	; 0
    11dc:	aa ef       	ldi	r26, 0xFA	; 250
    11de:	b4 e4       	ldi	r27, 0x44	; 68
    11e0:	8b 87       	std	Y+11, r24	; 0x0b
    11e2:	9c 87       	std	Y+12, r25	; 0x0c
    11e4:	ad 87       	std	Y+13, r26	; 0x0d
    11e6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    11ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	4a ef       	ldi	r20, 0xFA	; 250
    11f6:	54 e4       	ldi	r21, 0x44	; 68
    11f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11fc:	dc 01       	movw	r26, r24
    11fe:	cb 01       	movw	r24, r22
    1200:	8f 83       	std	Y+7, r24	; 0x07
    1202:	98 87       	std	Y+8, r25	; 0x08
    1204:	a9 87       	std	Y+9, r26	; 0x09
    1206:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1208:	6f 81       	ldd	r22, Y+7	; 0x07
    120a:	78 85       	ldd	r23, Y+8	; 0x08
    120c:	89 85       	ldd	r24, Y+9	; 0x09
    120e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	40 e8       	ldi	r20, 0x80	; 128
    1216:	5f e3       	ldi	r21, 0x3F	; 63
    1218:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    121c:	88 23       	and	r24, r24
    121e:	2c f4       	brge	.+10     	; 0x122a <openDoor+0xf8>
		__ticks = 1;
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	9e 83       	std	Y+6, r25	; 0x06
    1226:	8d 83       	std	Y+5, r24	; 0x05
    1228:	3f c0       	rjmp	.+126    	; 0x12a8 <openDoor+0x176>
	else if (__tmp > 65535)
    122a:	6f 81       	ldd	r22, Y+7	; 0x07
    122c:	78 85       	ldd	r23, Y+8	; 0x08
    122e:	89 85       	ldd	r24, Y+9	; 0x09
    1230:	9a 85       	ldd	r25, Y+10	; 0x0a
    1232:	20 e0       	ldi	r18, 0x00	; 0
    1234:	3f ef       	ldi	r19, 0xFF	; 255
    1236:	4f e7       	ldi	r20, 0x7F	; 127
    1238:	57 e4       	ldi	r21, 0x47	; 71
    123a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    123e:	18 16       	cp	r1, r24
    1240:	4c f5       	brge	.+82     	; 0x1294 <openDoor+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1242:	6b 85       	ldd	r22, Y+11	; 0x0b
    1244:	7c 85       	ldd	r23, Y+12	; 0x0c
    1246:	8d 85       	ldd	r24, Y+13	; 0x0d
    1248:	9e 85       	ldd	r25, Y+14	; 0x0e
    124a:	20 e0       	ldi	r18, 0x00	; 0
    124c:	30 e0       	ldi	r19, 0x00	; 0
    124e:	40 e2       	ldi	r20, 0x20	; 32
    1250:	51 e4       	ldi	r21, 0x41	; 65
    1252:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1256:	dc 01       	movw	r26, r24
    1258:	cb 01       	movw	r24, r22
    125a:	bc 01       	movw	r22, r24
    125c:	cd 01       	movw	r24, r26
    125e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	9e 83       	std	Y+6, r25	; 0x06
    1268:	8d 83       	std	Y+5, r24	; 0x05
    126a:	0f c0       	rjmp	.+30     	; 0x128a <openDoor+0x158>
    126c:	88 ec       	ldi	r24, 0xC8	; 200
    126e:	90 e0       	ldi	r25, 0x00	; 0
    1270:	9c 83       	std	Y+4, r25	; 0x04
    1272:	8b 83       	std	Y+3, r24	; 0x03
    1274:	8b 81       	ldd	r24, Y+3	; 0x03
    1276:	9c 81       	ldd	r25, Y+4	; 0x04
    1278:	01 97       	sbiw	r24, 0x01	; 1
    127a:	f1 f7       	brne	.-4      	; 0x1278 <openDoor+0x146>
    127c:	9c 83       	std	Y+4, r25	; 0x04
    127e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	9e 81       	ldd	r25, Y+6	; 0x06
    1284:	01 97       	sbiw	r24, 0x01	; 1
    1286:	9e 83       	std	Y+6, r25	; 0x06
    1288:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    128a:	8d 81       	ldd	r24, Y+5	; 0x05
    128c:	9e 81       	ldd	r25, Y+6	; 0x06
    128e:	00 97       	sbiw	r24, 0x00	; 0
    1290:	69 f7       	brne	.-38     	; 0x126c <openDoor+0x13a>
    1292:	14 c0       	rjmp	.+40     	; 0x12bc <openDoor+0x18a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1294:	6f 81       	ldd	r22, Y+7	; 0x07
    1296:	78 85       	ldd	r23, Y+8	; 0x08
    1298:	89 85       	ldd	r24, Y+9	; 0x09
    129a:	9a 85       	ldd	r25, Y+10	; 0x0a
    129c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9e 83       	std	Y+6, r25	; 0x06
    12a6:	8d 83       	std	Y+5, r24	; 0x05
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	9e 81       	ldd	r25, Y+6	; 0x06
    12ac:	9a 83       	std	Y+2, r25	; 0x02
    12ae:	89 83       	std	Y+1, r24	; 0x01
    12b0:	89 81       	ldd	r24, Y+1	; 0x01
    12b2:	9a 81       	ldd	r25, Y+2	; 0x02
    12b4:	01 97       	sbiw	r24, 0x01	; 1
    12b6:	f1 f7       	brne	.-4      	; 0x12b4 <openDoor+0x182>
    12b8:	9a 83       	std	Y+2, r25	; 0x02
    12ba:	89 83       	std	Y+1, r24	; 0x01
		}
		else {
			_delay_ms(2000); /* Wait for2 seconds for the user to read the error message on LCD */
			openDoor(); /* Recall the function recursively to repeat password entering procedure */
    12bc:	0e 94 99 08 	call	0x1132	; 0x1132 <openDoor>
		}
	}
}
    12c0:	6e 96       	adiw	r28, 0x1e	; 30
    12c2:	0f b6       	in	r0, 0x3f	; 63
    12c4:	f8 94       	cli
    12c6:	de bf       	out	0x3e, r29	; 62
    12c8:	0f be       	out	0x3f, r0	; 63
    12ca:	cd bf       	out	0x3d, r28	; 61
    12cc:	cf 91       	pop	r28
    12ce:	df 91       	pop	r29
    12d0:	08 95       	ret

000012d2 <changePassword>:

/* Called when the user chooses the "change password" option in main menu */
void changePassword() {
    12d2:	df 93       	push	r29
    12d4:	cf 93       	push	r28
    12d6:	cd b7       	in	r28, 0x3d	; 61
    12d8:	de b7       	in	r29, 0x3e	; 62
    12da:	ce 54       	subi	r28, 0x4E	; 78
    12dc:	d0 40       	sbci	r29, 0x00	; 0
    12de:	0f b6       	in	r0, 0x3f	; 63
    12e0:	f8 94       	cli
    12e2:	de bf       	out	0x3e, r29	; 62
    12e4:	0f be       	out	0x3f, r0	; 63
    12e6:	cd bf       	out	0x3d, r28	; 61
	/* static counter and flag to track function recursive calls */
	static uint8 wrongCount = 0;
	static uint8 correctOldPass = 0;

	/* Check for old password only once in a single call from main */
	if (!correctOldPass) {
    12e8:	80 91 09 01 	lds	r24, 0x0109
    12ec:	88 23       	and	r24, r24
    12ee:	c9 f4       	brne	.+50     	; 0x1322 <changePassword+0x50>
		LCD_clearScreen();
    12f0:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_clearScreen>
		LCD_displayString("Old Password:");
    12f4:	8a ee       	ldi	r24, 0xEA	; 234
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>
		LCD_moveCursor(1,0);
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	0e 94 5f 13 	call	0x26be	; 0x26be <LCD_moveCursor>
		getPassword(oldPass);
    1304:	ce 01       	movw	r24, r28
    1306:	4f 96       	adiw	r24, 0x1f	; 31
    1308:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <getPassword>
		UART_sendByte(0x08); /* Send message to ECU requesting a password check and change */
    130c:	88 e0       	ldi	r24, 0x08	; 8
    130e:	0e 94 3d 14 	call	0x287a	; 0x287a <UART_sendByte>
		UART_sendString(oldPass);
    1312:	ce 01       	movw	r24, r28
    1314:	4f 96       	adiw	r24, 0x1f	; 31
    1316:	0e 94 63 14 	call	0x28c6	; 0x28c6 <UART_sendString>
		/* Set flag indicating that old password has been entered correctly */
		correctOldPass = UART_receiveByte();
    131a:	0e 94 54 14 	call	0x28a8	; 0x28a8 <UART_receiveByte>
    131e:	80 93 09 01 	sts	0x0109, r24
	}

	if (correctOldPass) {
    1322:	80 91 09 01 	lds	r24, 0x0109
    1326:	88 23       	and	r24, r24
    1328:	09 f4       	brne	.+2      	; 0x132c <changePassword+0x5a>
    132a:	c9 c0       	rjmp	.+402    	; 0x14be <changePassword+0x1ec>
		/* get new password from user if old password is correct */
		LCD_clearScreen();
    132c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_clearScreen>
		LCD_displayString("New Password:");
    1330:	8e e8       	ldi	r24, 0x8E	; 142
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>
		LCD_moveCursor(1,0);
    1338:	81 e0       	ldi	r24, 0x01	; 1
    133a:	60 e0       	ldi	r22, 0x00	; 0
    133c:	0e 94 5f 13 	call	0x26be	; 0x26be <LCD_moveCursor>
		wrongCount = 0;
    1340:	10 92 0a 01 	sts	0x010A, r1
		getPassword(newPass1);
    1344:	ce 01       	movw	r24, r28
    1346:	8f 96       	adiw	r24, 0x2f	; 47
    1348:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <getPassword>

		/* Get password a second time from the user */
		LCD_clearScreen();
    134c:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_clearScreen>
		LCD_displayString("Again:");
    1350:	8c e9       	ldi	r24, 0x9C	; 156
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>
		LCD_moveCursor(1, 0);
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	60 e0       	ldi	r22, 0x00	; 0
    135c:	0e 94 5f 13 	call	0x26be	; 0x26be <LCD_moveCursor>
		getPassword(newPass2);
    1360:	ce 01       	movw	r24, r28
    1362:	cf 96       	adiw	r24, 0x3f	; 63
    1364:	0e 94 fb 06 	call	0xdf6	; 0xdf6 <getPassword>

		/* Check for password mismatch */
		for (int i = 0; i < 16; i++) {
    1368:	1e 8e       	std	Y+30, r1	; 0x1e
    136a:	1d 8e       	std	Y+29, r1	; 0x1d
    136c:	9d c0       	rjmp	.+314    	; 0x14a8 <changePassword+0x1d6>
			if (newPass1[i] != newPass2[i]) {
    136e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1370:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1372:	ce 01       	movw	r24, r28
    1374:	8f 96       	adiw	r24, 0x2f	; 47
    1376:	fc 01       	movw	r30, r24
    1378:	e2 0f       	add	r30, r18
    137a:	f3 1f       	adc	r31, r19
    137c:	40 81       	ld	r20, Z
    137e:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1380:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1382:	ce 01       	movw	r24, r28
    1384:	cf 96       	adiw	r24, 0x3f	; 63
    1386:	fc 01       	movw	r30, r24
    1388:	e2 0f       	add	r30, r18
    138a:	f3 1f       	adc	r31, r19
    138c:	80 81       	ld	r24, Z
    138e:	48 17       	cp	r20, r24
    1390:	09 f4       	brne	.+2      	; 0x1394 <changePassword+0xc2>
    1392:	7b c0       	rjmp	.+246    	; 0x148a <changePassword+0x1b8>
				LCD_clearScreen();
    1394:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_clearScreen>
				LCD_displayString("Mismatch");
    1398:	83 ea       	ldi	r24, 0xA3	; 163
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	aa ef       	ldi	r26, 0xFA	; 250
    13a6:	b4 e4       	ldi	r27, 0x44	; 68
    13a8:	89 8f       	std	Y+25, r24	; 0x19
    13aa:	9a 8f       	std	Y+26, r25	; 0x1a
    13ac:	ab 8f       	std	Y+27, r26	; 0x1b
    13ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b0:	69 8d       	ldd	r22, Y+25	; 0x19
    13b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    13b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    13b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	4a ef       	ldi	r20, 0xFA	; 250
    13be:	54 e4       	ldi	r21, 0x44	; 68
    13c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13c4:	dc 01       	movw	r26, r24
    13c6:	cb 01       	movw	r24, r22
    13c8:	8d 8b       	std	Y+21, r24	; 0x15
    13ca:	9e 8b       	std	Y+22, r25	; 0x16
    13cc:	af 8b       	std	Y+23, r26	; 0x17
    13ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    13d0:	6d 89       	ldd	r22, Y+21	; 0x15
    13d2:	7e 89       	ldd	r23, Y+22	; 0x16
    13d4:	8f 89       	ldd	r24, Y+23	; 0x17
    13d6:	98 8d       	ldd	r25, Y+24	; 0x18
    13d8:	20 e0       	ldi	r18, 0x00	; 0
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	40 e8       	ldi	r20, 0x80	; 128
    13de:	5f e3       	ldi	r21, 0x3F	; 63
    13e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13e4:	88 23       	and	r24, r24
    13e6:	2c f4       	brge	.+10     	; 0x13f2 <changePassword+0x120>
		__ticks = 1;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	9c 8b       	std	Y+20, r25	; 0x14
    13ee:	8b 8b       	std	Y+19, r24	; 0x13
    13f0:	3f c0       	rjmp	.+126    	; 0x1470 <changePassword+0x19e>
	else if (__tmp > 65535)
    13f2:	6d 89       	ldd	r22, Y+21	; 0x15
    13f4:	7e 89       	ldd	r23, Y+22	; 0x16
    13f6:	8f 89       	ldd	r24, Y+23	; 0x17
    13f8:	98 8d       	ldd	r25, Y+24	; 0x18
    13fa:	20 e0       	ldi	r18, 0x00	; 0
    13fc:	3f ef       	ldi	r19, 0xFF	; 255
    13fe:	4f e7       	ldi	r20, 0x7F	; 127
    1400:	57 e4       	ldi	r21, 0x47	; 71
    1402:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1406:	18 16       	cp	r1, r24
    1408:	4c f5       	brge	.+82     	; 0x145c <changePassword+0x18a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    140a:	69 8d       	ldd	r22, Y+25	; 0x19
    140c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    140e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1410:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	30 e0       	ldi	r19, 0x00	; 0
    1416:	40 e2       	ldi	r20, 0x20	; 32
    1418:	51 e4       	ldi	r21, 0x41	; 65
    141a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    141e:	dc 01       	movw	r26, r24
    1420:	cb 01       	movw	r24, r22
    1422:	bc 01       	movw	r22, r24
    1424:	cd 01       	movw	r24, r26
    1426:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    142a:	dc 01       	movw	r26, r24
    142c:	cb 01       	movw	r24, r22
    142e:	9c 8b       	std	Y+20, r25	; 0x14
    1430:	8b 8b       	std	Y+19, r24	; 0x13
    1432:	0f c0       	rjmp	.+30     	; 0x1452 <changePassword+0x180>
    1434:	88 ec       	ldi	r24, 0xC8	; 200
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	9a 8b       	std	Y+18, r25	; 0x12
    143a:	89 8b       	std	Y+17, r24	; 0x11
    143c:	89 89       	ldd	r24, Y+17	; 0x11
    143e:	9a 89       	ldd	r25, Y+18	; 0x12
    1440:	01 97       	sbiw	r24, 0x01	; 1
    1442:	f1 f7       	brne	.-4      	; 0x1440 <changePassword+0x16e>
    1444:	9a 8b       	std	Y+18, r25	; 0x12
    1446:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1448:	8b 89       	ldd	r24, Y+19	; 0x13
    144a:	9c 89       	ldd	r25, Y+20	; 0x14
    144c:	01 97       	sbiw	r24, 0x01	; 1
    144e:	9c 8b       	std	Y+20, r25	; 0x14
    1450:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1452:	8b 89       	ldd	r24, Y+19	; 0x13
    1454:	9c 89       	ldd	r25, Y+20	; 0x14
    1456:	00 97       	sbiw	r24, 0x00	; 0
    1458:	69 f7       	brne	.-38     	; 0x1434 <changePassword+0x162>
    145a:	14 c0       	rjmp	.+40     	; 0x1484 <changePassword+0x1b2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    145c:	6d 89       	ldd	r22, Y+21	; 0x15
    145e:	7e 89       	ldd	r23, Y+22	; 0x16
    1460:	8f 89       	ldd	r24, Y+23	; 0x17
    1462:	98 8d       	ldd	r25, Y+24	; 0x18
    1464:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1468:	dc 01       	movw	r26, r24
    146a:	cb 01       	movw	r24, r22
    146c:	9c 8b       	std	Y+20, r25	; 0x14
    146e:	8b 8b       	std	Y+19, r24	; 0x13
    1470:	8b 89       	ldd	r24, Y+19	; 0x13
    1472:	9c 89       	ldd	r25, Y+20	; 0x14
    1474:	98 8b       	std	Y+16, r25	; 0x10
    1476:	8f 87       	std	Y+15, r24	; 0x0f
    1478:	8f 85       	ldd	r24, Y+15	; 0x0f
    147a:	98 89       	ldd	r25, Y+16	; 0x10
    147c:	01 97       	sbiw	r24, 0x01	; 1
    147e:	f1 f7       	brne	.-4      	; 0x147c <changePassword+0x1aa>
    1480:	98 8b       	std	Y+16, r25	; 0x10
    1482:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(2000);
				changePassword(); /*call function again to re-get password */
    1484:	0e 94 69 09 	call	0x12d2	; 0x12d2 <changePassword>
    1488:	a4 c0       	rjmp	.+328    	; 0x15d2 <changePassword+0x300>
				return;
			}
			if (newPass1[i] == 0) break;
    148a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    148c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    148e:	ce 01       	movw	r24, r28
    1490:	8f 96       	adiw	r24, 0x2f	; 47
    1492:	fc 01       	movw	r30, r24
    1494:	e2 0f       	add	r30, r18
    1496:	f3 1f       	adc	r31, r19
    1498:	80 81       	ld	r24, Z
    149a:	88 23       	and	r24, r24
    149c:	59 f0       	breq	.+22     	; 0x14b4 <changePassword+0x1e2>
		LCD_displayString("Again:");
		LCD_moveCursor(1, 0);
		getPassword(newPass2);

		/* Check for password mismatch */
		for (int i = 0; i < 16; i++) {
    149e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14a0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14a2:	01 96       	adiw	r24, 0x01	; 1
    14a4:	9e 8f       	std	Y+30, r25	; 0x1e
    14a6:	8d 8f       	std	Y+29, r24	; 0x1d
    14a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    14aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    14ac:	80 31       	cpi	r24, 0x10	; 16
    14ae:	91 05       	cpc	r25, r1
    14b0:	0c f4       	brge	.+2      	; 0x14b4 <changePassword+0x1e2>
    14b2:	5d cf       	rjmp	.-326    	; 0x136e <changePassword+0x9c>
			}
			if (newPass1[i] == 0) break;
		}

		/* Send new password to control ECU */
		UART_sendString(newPass1);
    14b4:	ce 01       	movw	r24, r28
    14b6:	8f 96       	adiw	r24, 0x2f	; 47
    14b8:	0e 94 63 14 	call	0x28c6	; 0x28c6 <UART_sendString>
    14bc:	88 c0       	rjmp	.+272    	; 0x15ce <changePassword+0x2fc>
	}
	else {
		/* Print Error message to user indicating Wrong Password */
		LCD_clearScreen();
    14be:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_clearScreen>
		LCD_displayString("Wrong Password!");
    14c2:	8a ed       	ldi	r24, 0xDA	; 218
    14c4:	90 e0       	ldi	r25, 0x00	; 0
    14c6:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>

		/* Increment wrong password counter */
		wrongCount++;
    14ca:	80 91 0a 01 	lds	r24, 0x010A
    14ce:	8f 5f       	subi	r24, 0xFF	; 255
    14d0:	80 93 0a 01 	sts	0x010A, r24


		if (wrongCount == 3) {
    14d4:	80 91 0a 01 	lds	r24, 0x010A
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	29 f4       	brne	.+10     	; 0x14e6 <changePassword+0x214>
			soundAlarm(); /* Sound the Alarm if wrong password count reaches 3 */
    14dc:	0e 94 ac 07 	call	0xf58	; 0xf58 <soundAlarm>
			wrongCount = 0; /* Reset wrong password count for re-use next time */
    14e0:	10 92 0a 01 	sts	0x010A, r1
    14e4:	74 c0       	rjmp	.+232    	; 0x15ce <changePassword+0x2fc>
    14e6:	80 e0       	ldi	r24, 0x00	; 0
    14e8:	90 e0       	ldi	r25, 0x00	; 0
    14ea:	aa ef       	ldi	r26, 0xFA	; 250
    14ec:	b4 e4       	ldi	r27, 0x44	; 68
    14ee:	8b 87       	std	Y+11, r24	; 0x0b
    14f0:	9c 87       	std	Y+12, r25	; 0x0c
    14f2:	ad 87       	std	Y+13, r26	; 0x0d
    14f4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    14f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    14fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    14fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    14fe:	20 e0       	ldi	r18, 0x00	; 0
    1500:	30 e0       	ldi	r19, 0x00	; 0
    1502:	4a ef       	ldi	r20, 0xFA	; 250
    1504:	54 e4       	ldi	r21, 0x44	; 68
    1506:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150a:	dc 01       	movw	r26, r24
    150c:	cb 01       	movw	r24, r22
    150e:	8f 83       	std	Y+7, r24	; 0x07
    1510:	98 87       	std	Y+8, r25	; 0x08
    1512:	a9 87       	std	Y+9, r26	; 0x09
    1514:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1516:	6f 81       	ldd	r22, Y+7	; 0x07
    1518:	78 85       	ldd	r23, Y+8	; 0x08
    151a:	89 85       	ldd	r24, Y+9	; 0x09
    151c:	9a 85       	ldd	r25, Y+10	; 0x0a
    151e:	20 e0       	ldi	r18, 0x00	; 0
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	40 e8       	ldi	r20, 0x80	; 128
    1524:	5f e3       	ldi	r21, 0x3F	; 63
    1526:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    152a:	88 23       	and	r24, r24
    152c:	2c f4       	brge	.+10     	; 0x1538 <changePassword+0x266>
		__ticks = 1;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	90 e0       	ldi	r25, 0x00	; 0
    1532:	9e 83       	std	Y+6, r25	; 0x06
    1534:	8d 83       	std	Y+5, r24	; 0x05
    1536:	3f c0       	rjmp	.+126    	; 0x15b6 <changePassword+0x2e4>
	else if (__tmp > 65535)
    1538:	6f 81       	ldd	r22, Y+7	; 0x07
    153a:	78 85       	ldd	r23, Y+8	; 0x08
    153c:	89 85       	ldd	r24, Y+9	; 0x09
    153e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	3f ef       	ldi	r19, 0xFF	; 255
    1544:	4f e7       	ldi	r20, 0x7F	; 127
    1546:	57 e4       	ldi	r21, 0x47	; 71
    1548:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    154c:	18 16       	cp	r1, r24
    154e:	4c f5       	brge	.+82     	; 0x15a2 <changePassword+0x2d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1550:	6b 85       	ldd	r22, Y+11	; 0x0b
    1552:	7c 85       	ldd	r23, Y+12	; 0x0c
    1554:	8d 85       	ldd	r24, Y+13	; 0x0d
    1556:	9e 85       	ldd	r25, Y+14	; 0x0e
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e2       	ldi	r20, 0x20	; 32
    155e:	51 e4       	ldi	r21, 0x41	; 65
    1560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1564:	dc 01       	movw	r26, r24
    1566:	cb 01       	movw	r24, r22
    1568:	bc 01       	movw	r22, r24
    156a:	cd 01       	movw	r24, r26
    156c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1570:	dc 01       	movw	r26, r24
    1572:	cb 01       	movw	r24, r22
    1574:	9e 83       	std	Y+6, r25	; 0x06
    1576:	8d 83       	std	Y+5, r24	; 0x05
    1578:	0f c0       	rjmp	.+30     	; 0x1598 <changePassword+0x2c6>
    157a:	88 ec       	ldi	r24, 0xC8	; 200
    157c:	90 e0       	ldi	r25, 0x00	; 0
    157e:	9c 83       	std	Y+4, r25	; 0x04
    1580:	8b 83       	std	Y+3, r24	; 0x03
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	9c 81       	ldd	r25, Y+4	; 0x04
    1586:	01 97       	sbiw	r24, 0x01	; 1
    1588:	f1 f7       	brne	.-4      	; 0x1586 <changePassword+0x2b4>
    158a:	9c 83       	std	Y+4, r25	; 0x04
    158c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    158e:	8d 81       	ldd	r24, Y+5	; 0x05
    1590:	9e 81       	ldd	r25, Y+6	; 0x06
    1592:	01 97       	sbiw	r24, 0x01	; 1
    1594:	9e 83       	std	Y+6, r25	; 0x06
    1596:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	00 97       	sbiw	r24, 0x00	; 0
    159e:	69 f7       	brne	.-38     	; 0x157a <changePassword+0x2a8>
    15a0:	14 c0       	rjmp	.+40     	; 0x15ca <changePassword+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15a2:	6f 81       	ldd	r22, Y+7	; 0x07
    15a4:	78 85       	ldd	r23, Y+8	; 0x08
    15a6:	89 85       	ldd	r24, Y+9	; 0x09
    15a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15aa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ae:	dc 01       	movw	r26, r24
    15b0:	cb 01       	movw	r24, r22
    15b2:	9e 83       	std	Y+6, r25	; 0x06
    15b4:	8d 83       	std	Y+5, r24	; 0x05
    15b6:	8d 81       	ldd	r24, Y+5	; 0x05
    15b8:	9e 81       	ldd	r25, Y+6	; 0x06
    15ba:	9a 83       	std	Y+2, r25	; 0x02
    15bc:	89 83       	std	Y+1, r24	; 0x01
    15be:	89 81       	ldd	r24, Y+1	; 0x01
    15c0:	9a 81       	ldd	r25, Y+2	; 0x02
    15c2:	01 97       	sbiw	r24, 0x01	; 1
    15c4:	f1 f7       	brne	.-4      	; 0x15c2 <changePassword+0x2f0>
    15c6:	9a 83       	std	Y+2, r25	; 0x02
    15c8:	89 83       	std	Y+1, r24	; 0x01
		}
		else {
			_delay_ms(2000); /* Wait for 2 seconds for the user to read the error message on LCD */
			changePassword(); /* Recall the function recursively to repeat password entering procedure */
    15ca:	0e 94 69 09 	call	0x12d2	; 0x12d2 <changePassword>
		}
	}

	correctOldPass = 0; /* Reset flag on end of the first call from main for re-use */
    15ce:	10 92 09 01 	sts	0x0109, r1
}
    15d2:	c2 5b       	subi	r28, 0xB2	; 178
    15d4:	df 4f       	sbci	r29, 0xFF	; 255
    15d6:	0f b6       	in	r0, 0x3f	; 63
    15d8:	f8 94       	cli
    15da:	de bf       	out	0x3e, r29	; 62
    15dc:	0f be       	out	0x3f, r0	; 63
    15de:	cd bf       	out	0x3d, r28	; 61
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	08 95       	ret

000015e6 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    15e6:	df 93       	push	r29
    15e8:	cf 93       	push	r28
    15ea:	00 d0       	rcall	.+0      	; 0x15ec <GPIO_setupPinDirection+0x6>
    15ec:	00 d0       	rcall	.+0      	; 0x15ee <GPIO_setupPinDirection+0x8>
    15ee:	0f 92       	push	r0
    15f0:	cd b7       	in	r28, 0x3d	; 61
    15f2:	de b7       	in	r29, 0x3e	; 62
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	6a 83       	std	Y+2, r22	; 0x02
    15f8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	88 30       	cpi	r24, 0x08	; 8
    15fe:	08 f0       	brcs	.+2      	; 0x1602 <GPIO_setupPinDirection+0x1c>
    1600:	d5 c0       	rjmp	.+426    	; 0x17ac <GPIO_setupPinDirection+0x1c6>
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	84 30       	cpi	r24, 0x04	; 4
    1606:	08 f0       	brcs	.+2      	; 0x160a <GPIO_setupPinDirection+0x24>
    1608:	d1 c0       	rjmp	.+418    	; 0x17ac <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    160a:	89 81       	ldd	r24, Y+1	; 0x01
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	3d 83       	std	Y+5, r19	; 0x05
    1612:	2c 83       	std	Y+4, r18	; 0x04
    1614:	8c 81       	ldd	r24, Y+4	; 0x04
    1616:	9d 81       	ldd	r25, Y+5	; 0x05
    1618:	81 30       	cpi	r24, 0x01	; 1
    161a:	91 05       	cpc	r25, r1
    161c:	09 f4       	brne	.+2      	; 0x1620 <GPIO_setupPinDirection+0x3a>
    161e:	43 c0       	rjmp	.+134    	; 0x16a6 <GPIO_setupPinDirection+0xc0>
    1620:	2c 81       	ldd	r18, Y+4	; 0x04
    1622:	3d 81       	ldd	r19, Y+5	; 0x05
    1624:	22 30       	cpi	r18, 0x02	; 2
    1626:	31 05       	cpc	r19, r1
    1628:	2c f4       	brge	.+10     	; 0x1634 <GPIO_setupPinDirection+0x4e>
    162a:	8c 81       	ldd	r24, Y+4	; 0x04
    162c:	9d 81       	ldd	r25, Y+5	; 0x05
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	71 f0       	breq	.+28     	; 0x164e <GPIO_setupPinDirection+0x68>
    1632:	bc c0       	rjmp	.+376    	; 0x17ac <GPIO_setupPinDirection+0x1c6>
    1634:	2c 81       	ldd	r18, Y+4	; 0x04
    1636:	3d 81       	ldd	r19, Y+5	; 0x05
    1638:	22 30       	cpi	r18, 0x02	; 2
    163a:	31 05       	cpc	r19, r1
    163c:	09 f4       	brne	.+2      	; 0x1640 <GPIO_setupPinDirection+0x5a>
    163e:	5f c0       	rjmp	.+190    	; 0x16fe <GPIO_setupPinDirection+0x118>
    1640:	8c 81       	ldd	r24, Y+4	; 0x04
    1642:	9d 81       	ldd	r25, Y+5	; 0x05
    1644:	83 30       	cpi	r24, 0x03	; 3
    1646:	91 05       	cpc	r25, r1
    1648:	09 f4       	brne	.+2      	; 0x164c <GPIO_setupPinDirection+0x66>
    164a:	85 c0       	rjmp	.+266    	; 0x1756 <GPIO_setupPinDirection+0x170>
    164c:	af c0       	rjmp	.+350    	; 0x17ac <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    164e:	8b 81       	ldd	r24, Y+3	; 0x03
    1650:	81 30       	cpi	r24, 0x01	; 1
    1652:	a1 f4       	brne	.+40     	; 0x167c <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1654:	aa e3       	ldi	r26, 0x3A	; 58
    1656:	b0 e0       	ldi	r27, 0x00	; 0
    1658:	ea e3       	ldi	r30, 0x3A	; 58
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	48 2f       	mov	r20, r24
    1660:	8a 81       	ldd	r24, Y+2	; 0x02
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	81 e0       	ldi	r24, 0x01	; 1
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	02 2e       	mov	r0, r18
    166c:	02 c0       	rjmp	.+4      	; 0x1672 <GPIO_setupPinDirection+0x8c>
    166e:	88 0f       	add	r24, r24
    1670:	99 1f       	adc	r25, r25
    1672:	0a 94       	dec	r0
    1674:	e2 f7       	brpl	.-8      	; 0x166e <GPIO_setupPinDirection+0x88>
    1676:	84 2b       	or	r24, r20
    1678:	8c 93       	st	X, r24
    167a:	98 c0       	rjmp	.+304    	; 0x17ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    167c:	aa e3       	ldi	r26, 0x3A	; 58
    167e:	b0 e0       	ldi	r27, 0x00	; 0
    1680:	ea e3       	ldi	r30, 0x3A	; 58
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	48 2f       	mov	r20, r24
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	81 e0       	ldi	r24, 0x01	; 1
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	02 2e       	mov	r0, r18
    1694:	02 c0       	rjmp	.+4      	; 0x169a <GPIO_setupPinDirection+0xb4>
    1696:	88 0f       	add	r24, r24
    1698:	99 1f       	adc	r25, r25
    169a:	0a 94       	dec	r0
    169c:	e2 f7       	brpl	.-8      	; 0x1696 <GPIO_setupPinDirection+0xb0>
    169e:	80 95       	com	r24
    16a0:	84 23       	and	r24, r20
    16a2:	8c 93       	st	X, r24
    16a4:	83 c0       	rjmp	.+262    	; 0x17ac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    16a6:	8b 81       	ldd	r24, Y+3	; 0x03
    16a8:	81 30       	cpi	r24, 0x01	; 1
    16aa:	a1 f4       	brne	.+40     	; 0x16d4 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    16ac:	a7 e3       	ldi	r26, 0x37	; 55
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e7 e3       	ldi	r30, 0x37	; 55
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	48 2f       	mov	r20, r24
    16b8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ba:	28 2f       	mov	r18, r24
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	81 e0       	ldi	r24, 0x01	; 1
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	02 2e       	mov	r0, r18
    16c4:	02 c0       	rjmp	.+4      	; 0x16ca <GPIO_setupPinDirection+0xe4>
    16c6:	88 0f       	add	r24, r24
    16c8:	99 1f       	adc	r25, r25
    16ca:	0a 94       	dec	r0
    16cc:	e2 f7       	brpl	.-8      	; 0x16c6 <GPIO_setupPinDirection+0xe0>
    16ce:	84 2b       	or	r24, r20
    16d0:	8c 93       	st	X, r24
    16d2:	6c c0       	rjmp	.+216    	; 0x17ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    16d4:	a7 e3       	ldi	r26, 0x37	; 55
    16d6:	b0 e0       	ldi	r27, 0x00	; 0
    16d8:	e7 e3       	ldi	r30, 0x37	; 55
    16da:	f0 e0       	ldi	r31, 0x00	; 0
    16dc:	80 81       	ld	r24, Z
    16de:	48 2f       	mov	r20, r24
    16e0:	8a 81       	ldd	r24, Y+2	; 0x02
    16e2:	28 2f       	mov	r18, r24
    16e4:	30 e0       	ldi	r19, 0x00	; 0
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	02 2e       	mov	r0, r18
    16ec:	02 c0       	rjmp	.+4      	; 0x16f2 <GPIO_setupPinDirection+0x10c>
    16ee:	88 0f       	add	r24, r24
    16f0:	99 1f       	adc	r25, r25
    16f2:	0a 94       	dec	r0
    16f4:	e2 f7       	brpl	.-8      	; 0x16ee <GPIO_setupPinDirection+0x108>
    16f6:	80 95       	com	r24
    16f8:	84 23       	and	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	57 c0       	rjmp	.+174    	; 0x17ac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    16fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1700:	81 30       	cpi	r24, 0x01	; 1
    1702:	a1 f4       	brne	.+40     	; 0x172c <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1704:	a4 e3       	ldi	r26, 0x34	; 52
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	e4 e3       	ldi	r30, 0x34	; 52
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <GPIO_setupPinDirection+0x13c>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <GPIO_setupPinDirection+0x138>
    1726:	84 2b       	or	r24, r20
    1728:	8c 93       	st	X, r24
    172a:	40 c0       	rjmp	.+128    	; 0x17ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    172c:	a4 e3       	ldi	r26, 0x34	; 52
    172e:	b0 e0       	ldi	r27, 0x00	; 0
    1730:	e4 e3       	ldi	r30, 0x34	; 52
    1732:	f0 e0       	ldi	r31, 0x00	; 0
    1734:	80 81       	ld	r24, Z
    1736:	48 2f       	mov	r20, r24
    1738:	8a 81       	ldd	r24, Y+2	; 0x02
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	02 2e       	mov	r0, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <GPIO_setupPinDirection+0x164>
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	0a 94       	dec	r0
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <GPIO_setupPinDirection+0x160>
    174e:	80 95       	com	r24
    1750:	84 23       	and	r24, r20
    1752:	8c 93       	st	X, r24
    1754:	2b c0       	rjmp	.+86     	; 0x17ac <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1756:	8b 81       	ldd	r24, Y+3	; 0x03
    1758:	81 30       	cpi	r24, 0x01	; 1
    175a:	a1 f4       	brne	.+40     	; 0x1784 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    175c:	a1 e3       	ldi	r26, 0x31	; 49
    175e:	b0 e0       	ldi	r27, 0x00	; 0
    1760:	e1 e3       	ldi	r30, 0x31	; 49
    1762:	f0 e0       	ldi	r31, 0x00	; 0
    1764:	80 81       	ld	r24, Z
    1766:	48 2f       	mov	r20, r24
    1768:	8a 81       	ldd	r24, Y+2	; 0x02
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 2e       	mov	r0, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <GPIO_setupPinDirection+0x194>
    1776:	88 0f       	add	r24, r24
    1778:	99 1f       	adc	r25, r25
    177a:	0a 94       	dec	r0
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <GPIO_setupPinDirection+0x190>
    177e:	84 2b       	or	r24, r20
    1780:	8c 93       	st	X, r24
    1782:	14 c0       	rjmp	.+40     	; 0x17ac <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1784:	a1 e3       	ldi	r26, 0x31	; 49
    1786:	b0 e0       	ldi	r27, 0x00	; 0
    1788:	e1 e3       	ldi	r30, 0x31	; 49
    178a:	f0 e0       	ldi	r31, 0x00	; 0
    178c:	80 81       	ld	r24, Z
    178e:	48 2f       	mov	r20, r24
    1790:	8a 81       	ldd	r24, Y+2	; 0x02
    1792:	28 2f       	mov	r18, r24
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	81 e0       	ldi	r24, 0x01	; 1
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	02 2e       	mov	r0, r18
    179c:	02 c0       	rjmp	.+4      	; 0x17a2 <GPIO_setupPinDirection+0x1bc>
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	0a 94       	dec	r0
    17a4:	e2 f7       	brpl	.-8      	; 0x179e <GPIO_setupPinDirection+0x1b8>
    17a6:	80 95       	com	r24
    17a8:	84 23       	and	r24, r20
    17aa:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	cf 91       	pop	r28
    17b8:	df 91       	pop	r29
    17ba:	08 95       	ret

000017bc <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <GPIO_writePin+0x6>
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <GPIO_writePin+0x8>
    17c4:	0f 92       	push	r0
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	89 83       	std	Y+1, r24	; 0x01
    17cc:	6a 83       	std	Y+2, r22	; 0x02
    17ce:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	88 30       	cpi	r24, 0x08	; 8
    17d4:	08 f0       	brcs	.+2      	; 0x17d8 <GPIO_writePin+0x1c>
    17d6:	d5 c0       	rjmp	.+426    	; 0x1982 <GPIO_writePin+0x1c6>
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	84 30       	cpi	r24, 0x04	; 4
    17dc:	08 f0       	brcs	.+2      	; 0x17e0 <GPIO_writePin+0x24>
    17de:	d1 c0       	rjmp	.+418    	; 0x1982 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    17e0:	89 81       	ldd	r24, Y+1	; 0x01
    17e2:	28 2f       	mov	r18, r24
    17e4:	30 e0       	ldi	r19, 0x00	; 0
    17e6:	3d 83       	std	Y+5, r19	; 0x05
    17e8:	2c 83       	std	Y+4, r18	; 0x04
    17ea:	8c 81       	ldd	r24, Y+4	; 0x04
    17ec:	9d 81       	ldd	r25, Y+5	; 0x05
    17ee:	81 30       	cpi	r24, 0x01	; 1
    17f0:	91 05       	cpc	r25, r1
    17f2:	09 f4       	brne	.+2      	; 0x17f6 <GPIO_writePin+0x3a>
    17f4:	43 c0       	rjmp	.+134    	; 0x187c <GPIO_writePin+0xc0>
    17f6:	2c 81       	ldd	r18, Y+4	; 0x04
    17f8:	3d 81       	ldd	r19, Y+5	; 0x05
    17fa:	22 30       	cpi	r18, 0x02	; 2
    17fc:	31 05       	cpc	r19, r1
    17fe:	2c f4       	brge	.+10     	; 0x180a <GPIO_writePin+0x4e>
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	9d 81       	ldd	r25, Y+5	; 0x05
    1804:	00 97       	sbiw	r24, 0x00	; 0
    1806:	71 f0       	breq	.+28     	; 0x1824 <GPIO_writePin+0x68>
    1808:	bc c0       	rjmp	.+376    	; 0x1982 <GPIO_writePin+0x1c6>
    180a:	2c 81       	ldd	r18, Y+4	; 0x04
    180c:	3d 81       	ldd	r19, Y+5	; 0x05
    180e:	22 30       	cpi	r18, 0x02	; 2
    1810:	31 05       	cpc	r19, r1
    1812:	09 f4       	brne	.+2      	; 0x1816 <GPIO_writePin+0x5a>
    1814:	5f c0       	rjmp	.+190    	; 0x18d4 <GPIO_writePin+0x118>
    1816:	8c 81       	ldd	r24, Y+4	; 0x04
    1818:	9d 81       	ldd	r25, Y+5	; 0x05
    181a:	83 30       	cpi	r24, 0x03	; 3
    181c:	91 05       	cpc	r25, r1
    181e:	09 f4       	brne	.+2      	; 0x1822 <GPIO_writePin+0x66>
    1820:	85 c0       	rjmp	.+266    	; 0x192c <GPIO_writePin+0x170>
    1822:	af c0       	rjmp	.+350    	; 0x1982 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1824:	8b 81       	ldd	r24, Y+3	; 0x03
    1826:	81 30       	cpi	r24, 0x01	; 1
    1828:	a1 f4       	brne	.+40     	; 0x1852 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    182a:	ab e3       	ldi	r26, 0x3B	; 59
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	eb e3       	ldi	r30, 0x3B	; 59
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <GPIO_writePin+0x8c>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <GPIO_writePin+0x88>
    184c:	84 2b       	or	r24, r20
    184e:	8c 93       	st	X, r24
    1850:	98 c0       	rjmp	.+304    	; 0x1982 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1852:	ab e3       	ldi	r26, 0x3B	; 59
    1854:	b0 e0       	ldi	r27, 0x00	; 0
    1856:	eb e3       	ldi	r30, 0x3B	; 59
    1858:	f0 e0       	ldi	r31, 0x00	; 0
    185a:	80 81       	ld	r24, Z
    185c:	48 2f       	mov	r20, r24
    185e:	8a 81       	ldd	r24, Y+2	; 0x02
    1860:	28 2f       	mov	r18, r24
    1862:	30 e0       	ldi	r19, 0x00	; 0
    1864:	81 e0       	ldi	r24, 0x01	; 1
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	02 2e       	mov	r0, r18
    186a:	02 c0       	rjmp	.+4      	; 0x1870 <GPIO_writePin+0xb4>
    186c:	88 0f       	add	r24, r24
    186e:	99 1f       	adc	r25, r25
    1870:	0a 94       	dec	r0
    1872:	e2 f7       	brpl	.-8      	; 0x186c <GPIO_writePin+0xb0>
    1874:	80 95       	com	r24
    1876:	84 23       	and	r24, r20
    1878:	8c 93       	st	X, r24
    187a:	83 c0       	rjmp	.+262    	; 0x1982 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	81 30       	cpi	r24, 0x01	; 1
    1880:	a1 f4       	brne	.+40     	; 0x18aa <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1882:	a8 e3       	ldi	r26, 0x38	; 56
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e8 e3       	ldi	r30, 0x38	; 56
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	48 2f       	mov	r20, r24
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 2e       	mov	r0, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <GPIO_writePin+0xe4>
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0a 94       	dec	r0
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <GPIO_writePin+0xe0>
    18a4:	84 2b       	or	r24, r20
    18a6:	8c 93       	st	X, r24
    18a8:	6c c0       	rjmp	.+216    	; 0x1982 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    18aa:	a8 e3       	ldi	r26, 0x38	; 56
    18ac:	b0 e0       	ldi	r27, 0x00	; 0
    18ae:	e8 e3       	ldi	r30, 0x38	; 56
    18b0:	f0 e0       	ldi	r31, 0x00	; 0
    18b2:	80 81       	ld	r24, Z
    18b4:	48 2f       	mov	r20, r24
    18b6:	8a 81       	ldd	r24, Y+2	; 0x02
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	81 e0       	ldi	r24, 0x01	; 1
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	02 2e       	mov	r0, r18
    18c2:	02 c0       	rjmp	.+4      	; 0x18c8 <GPIO_writePin+0x10c>
    18c4:	88 0f       	add	r24, r24
    18c6:	99 1f       	adc	r25, r25
    18c8:	0a 94       	dec	r0
    18ca:	e2 f7       	brpl	.-8      	; 0x18c4 <GPIO_writePin+0x108>
    18cc:	80 95       	com	r24
    18ce:	84 23       	and	r24, r20
    18d0:	8c 93       	st	X, r24
    18d2:	57 c0       	rjmp	.+174    	; 0x1982 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    18d4:	8b 81       	ldd	r24, Y+3	; 0x03
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	a1 f4       	brne	.+40     	; 0x1902 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    18da:	a5 e3       	ldi	r26, 0x35	; 53
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e5 e3       	ldi	r30, 0x35	; 53
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	48 2f       	mov	r20, r24
    18e6:	8a 81       	ldd	r24, Y+2	; 0x02
    18e8:	28 2f       	mov	r18, r24
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	02 2e       	mov	r0, r18
    18f2:	02 c0       	rjmp	.+4      	; 0x18f8 <GPIO_writePin+0x13c>
    18f4:	88 0f       	add	r24, r24
    18f6:	99 1f       	adc	r25, r25
    18f8:	0a 94       	dec	r0
    18fa:	e2 f7       	brpl	.-8      	; 0x18f4 <GPIO_writePin+0x138>
    18fc:	84 2b       	or	r24, r20
    18fe:	8c 93       	st	X, r24
    1900:	40 c0       	rjmp	.+128    	; 0x1982 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1902:	a5 e3       	ldi	r26, 0x35	; 53
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	e5 e3       	ldi	r30, 0x35	; 53
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	48 2f       	mov	r20, r24
    190e:	8a 81       	ldd	r24, Y+2	; 0x02
    1910:	28 2f       	mov	r18, r24
    1912:	30 e0       	ldi	r19, 0x00	; 0
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	02 2e       	mov	r0, r18
    191a:	02 c0       	rjmp	.+4      	; 0x1920 <GPIO_writePin+0x164>
    191c:	88 0f       	add	r24, r24
    191e:	99 1f       	adc	r25, r25
    1920:	0a 94       	dec	r0
    1922:	e2 f7       	brpl	.-8      	; 0x191c <GPIO_writePin+0x160>
    1924:	80 95       	com	r24
    1926:	84 23       	and	r24, r20
    1928:	8c 93       	st	X, r24
    192a:	2b c0       	rjmp	.+86     	; 0x1982 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    192c:	8b 81       	ldd	r24, Y+3	; 0x03
    192e:	81 30       	cpi	r24, 0x01	; 1
    1930:	a1 f4       	brne	.+40     	; 0x195a <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1932:	a2 e3       	ldi	r26, 0x32	; 50
    1934:	b0 e0       	ldi	r27, 0x00	; 0
    1936:	e2 e3       	ldi	r30, 0x32	; 50
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	80 81       	ld	r24, Z
    193c:	48 2f       	mov	r20, r24
    193e:	8a 81       	ldd	r24, Y+2	; 0x02
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	81 e0       	ldi	r24, 0x01	; 1
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	02 2e       	mov	r0, r18
    194a:	02 c0       	rjmp	.+4      	; 0x1950 <GPIO_writePin+0x194>
    194c:	88 0f       	add	r24, r24
    194e:	99 1f       	adc	r25, r25
    1950:	0a 94       	dec	r0
    1952:	e2 f7       	brpl	.-8      	; 0x194c <GPIO_writePin+0x190>
    1954:	84 2b       	or	r24, r20
    1956:	8c 93       	st	X, r24
    1958:	14 c0       	rjmp	.+40     	; 0x1982 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    195a:	a2 e3       	ldi	r26, 0x32	; 50
    195c:	b0 e0       	ldi	r27, 0x00	; 0
    195e:	e2 e3       	ldi	r30, 0x32	; 50
    1960:	f0 e0       	ldi	r31, 0x00	; 0
    1962:	80 81       	ld	r24, Z
    1964:	48 2f       	mov	r20, r24
    1966:	8a 81       	ldd	r24, Y+2	; 0x02
    1968:	28 2f       	mov	r18, r24
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	02 2e       	mov	r0, r18
    1972:	02 c0       	rjmp	.+4      	; 0x1978 <GPIO_writePin+0x1bc>
    1974:	88 0f       	add	r24, r24
    1976:	99 1f       	adc	r25, r25
    1978:	0a 94       	dec	r0
    197a:	e2 f7       	brpl	.-8      	; 0x1974 <GPIO_writePin+0x1b8>
    197c:	80 95       	com	r24
    197e:	84 23       	and	r24, r20
    1980:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1982:	0f 90       	pop	r0
    1984:	0f 90       	pop	r0
    1986:	0f 90       	pop	r0
    1988:	0f 90       	pop	r0
    198a:	0f 90       	pop	r0
    198c:	cf 91       	pop	r28
    198e:	df 91       	pop	r29
    1990:	08 95       	ret

00001992 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1992:	df 93       	push	r29
    1994:	cf 93       	push	r28
    1996:	00 d0       	rcall	.+0      	; 0x1998 <GPIO_readPin+0x6>
    1998:	00 d0       	rcall	.+0      	; 0x199a <GPIO_readPin+0x8>
    199a:	0f 92       	push	r0
    199c:	cd b7       	in	r28, 0x3d	; 61
    199e:	de b7       	in	r29, 0x3e	; 62
    19a0:	8a 83       	std	Y+2, r24	; 0x02
    19a2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    19a4:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    19a6:	8b 81       	ldd	r24, Y+3	; 0x03
    19a8:	88 30       	cpi	r24, 0x08	; 8
    19aa:	08 f0       	brcs	.+2      	; 0x19ae <GPIO_readPin+0x1c>
    19ac:	84 c0       	rjmp	.+264    	; 0x1ab6 <GPIO_readPin+0x124>
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	84 30       	cpi	r24, 0x04	; 4
    19b2:	08 f0       	brcs	.+2      	; 0x19b6 <GPIO_readPin+0x24>
    19b4:	80 c0       	rjmp	.+256    	; 0x1ab6 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    19b6:	8a 81       	ldd	r24, Y+2	; 0x02
    19b8:	28 2f       	mov	r18, r24
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	3d 83       	std	Y+5, r19	; 0x05
    19be:	2c 83       	std	Y+4, r18	; 0x04
    19c0:	4c 81       	ldd	r20, Y+4	; 0x04
    19c2:	5d 81       	ldd	r21, Y+5	; 0x05
    19c4:	41 30       	cpi	r20, 0x01	; 1
    19c6:	51 05       	cpc	r21, r1
    19c8:	79 f1       	breq	.+94     	; 0x1a28 <GPIO_readPin+0x96>
    19ca:	8c 81       	ldd	r24, Y+4	; 0x04
    19cc:	9d 81       	ldd	r25, Y+5	; 0x05
    19ce:	82 30       	cpi	r24, 0x02	; 2
    19d0:	91 05       	cpc	r25, r1
    19d2:	34 f4       	brge	.+12     	; 0x19e0 <GPIO_readPin+0x4e>
    19d4:	2c 81       	ldd	r18, Y+4	; 0x04
    19d6:	3d 81       	ldd	r19, Y+5	; 0x05
    19d8:	21 15       	cp	r18, r1
    19da:	31 05       	cpc	r19, r1
    19dc:	69 f0       	breq	.+26     	; 0x19f8 <GPIO_readPin+0x66>
    19de:	6b c0       	rjmp	.+214    	; 0x1ab6 <GPIO_readPin+0x124>
    19e0:	4c 81       	ldd	r20, Y+4	; 0x04
    19e2:	5d 81       	ldd	r21, Y+5	; 0x05
    19e4:	42 30       	cpi	r20, 0x02	; 2
    19e6:	51 05       	cpc	r21, r1
    19e8:	b9 f1       	breq	.+110    	; 0x1a58 <GPIO_readPin+0xc6>
    19ea:	8c 81       	ldd	r24, Y+4	; 0x04
    19ec:	9d 81       	ldd	r25, Y+5	; 0x05
    19ee:	83 30       	cpi	r24, 0x03	; 3
    19f0:	91 05       	cpc	r25, r1
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <GPIO_readPin+0x64>
    19f4:	49 c0       	rjmp	.+146    	; 0x1a88 <GPIO_readPin+0xf6>
    19f6:	5f c0       	rjmp	.+190    	; 0x1ab6 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    19f8:	e9 e3       	ldi	r30, 0x39	; 57
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	28 2f       	mov	r18, r24
    1a00:	30 e0       	ldi	r19, 0x00	; 0
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	a9 01       	movw	r20, r18
    1a0a:	02 c0       	rjmp	.+4      	; 0x1a10 <GPIO_readPin+0x7e>
    1a0c:	55 95       	asr	r21
    1a0e:	47 95       	ror	r20
    1a10:	8a 95       	dec	r24
    1a12:	e2 f7       	brpl	.-8      	; 0x1a0c <GPIO_readPin+0x7a>
    1a14:	ca 01       	movw	r24, r20
    1a16:	81 70       	andi	r24, 0x01	; 1
    1a18:	90 70       	andi	r25, 0x00	; 0
    1a1a:	88 23       	and	r24, r24
    1a1c:	19 f0       	breq	.+6      	; 0x1a24 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1a1e:	81 e0       	ldi	r24, 0x01	; 1
    1a20:	89 83       	std	Y+1, r24	; 0x01
    1a22:	49 c0       	rjmp	.+146    	; 0x1ab6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a24:	19 82       	std	Y+1, r1	; 0x01
    1a26:	47 c0       	rjmp	.+142    	; 0x1ab6 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1a28:	e6 e3       	ldi	r30, 0x36	; 54
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	28 2f       	mov	r18, r24
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	8b 81       	ldd	r24, Y+3	; 0x03
    1a34:	88 2f       	mov	r24, r24
    1a36:	90 e0       	ldi	r25, 0x00	; 0
    1a38:	a9 01       	movw	r20, r18
    1a3a:	02 c0       	rjmp	.+4      	; 0x1a40 <GPIO_readPin+0xae>
    1a3c:	55 95       	asr	r21
    1a3e:	47 95       	ror	r20
    1a40:	8a 95       	dec	r24
    1a42:	e2 f7       	brpl	.-8      	; 0x1a3c <GPIO_readPin+0xaa>
    1a44:	ca 01       	movw	r24, r20
    1a46:	81 70       	andi	r24, 0x01	; 1
    1a48:	90 70       	andi	r25, 0x00	; 0
    1a4a:	88 23       	and	r24, r24
    1a4c:	19 f0       	breq	.+6      	; 0x1a54 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	89 83       	std	Y+1, r24	; 0x01
    1a52:	31 c0       	rjmp	.+98     	; 0x1ab6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a54:	19 82       	std	Y+1, r1	; 0x01
    1a56:	2f c0       	rjmp	.+94     	; 0x1ab6 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1a58:	e3 e3       	ldi	r30, 0x33	; 51
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	28 2f       	mov	r18, r24
    1a60:	30 e0       	ldi	r19, 0x00	; 0
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	88 2f       	mov	r24, r24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a9 01       	movw	r20, r18
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <GPIO_readPin+0xde>
    1a6c:	55 95       	asr	r21
    1a6e:	47 95       	ror	r20
    1a70:	8a 95       	dec	r24
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <GPIO_readPin+0xda>
    1a74:	ca 01       	movw	r24, r20
    1a76:	81 70       	andi	r24, 0x01	; 1
    1a78:	90 70       	andi	r25, 0x00	; 0
    1a7a:	88 23       	and	r24, r24
    1a7c:	19 f0       	breq	.+6      	; 0x1a84 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1a7e:	81 e0       	ldi	r24, 0x01	; 1
    1a80:	89 83       	std	Y+1, r24	; 0x01
    1a82:	19 c0       	rjmp	.+50     	; 0x1ab6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1a84:	19 82       	std	Y+1, r1	; 0x01
    1a86:	17 c0       	rjmp	.+46     	; 0x1ab6 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1a88:	e0 e3       	ldi	r30, 0x30	; 48
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	28 2f       	mov	r18, r24
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	8b 81       	ldd	r24, Y+3	; 0x03
    1a94:	88 2f       	mov	r24, r24
    1a96:	90 e0       	ldi	r25, 0x00	; 0
    1a98:	a9 01       	movw	r20, r18
    1a9a:	02 c0       	rjmp	.+4      	; 0x1aa0 <GPIO_readPin+0x10e>
    1a9c:	55 95       	asr	r21
    1a9e:	47 95       	ror	r20
    1aa0:	8a 95       	dec	r24
    1aa2:	e2 f7       	brpl	.-8      	; 0x1a9c <GPIO_readPin+0x10a>
    1aa4:	ca 01       	movw	r24, r20
    1aa6:	81 70       	andi	r24, 0x01	; 1
    1aa8:	90 70       	andi	r25, 0x00	; 0
    1aaa:	88 23       	and	r24, r24
    1aac:	19 f0       	breq	.+6      	; 0x1ab4 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1aae:	81 e0       	ldi	r24, 0x01	; 1
    1ab0:	89 83       	std	Y+1, r24	; 0x01
    1ab2:	01 c0       	rjmp	.+2      	; 0x1ab6 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1ab4:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1ab6:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ab8:	0f 90       	pop	r0
    1aba:	0f 90       	pop	r0
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	cf 91       	pop	r28
    1ac4:	df 91       	pop	r29
    1ac6:	08 95       	ret

00001ac8 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <GPIO_setupPortDirection+0x6>
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <GPIO_setupPortDirection+0x8>
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	89 83       	std	Y+1, r24	; 0x01
    1ad6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ad8:	89 81       	ldd	r24, Y+1	; 0x01
    1ada:	84 30       	cpi	r24, 0x04	; 4
    1adc:	90 f5       	brcc	.+100    	; 0x1b42 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1ade:	89 81       	ldd	r24, Y+1	; 0x01
    1ae0:	28 2f       	mov	r18, r24
    1ae2:	30 e0       	ldi	r19, 0x00	; 0
    1ae4:	3c 83       	std	Y+4, r19	; 0x04
    1ae6:	2b 83       	std	Y+3, r18	; 0x03
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	9c 81       	ldd	r25, Y+4	; 0x04
    1aec:	81 30       	cpi	r24, 0x01	; 1
    1aee:	91 05       	cpc	r25, r1
    1af0:	d1 f0       	breq	.+52     	; 0x1b26 <GPIO_setupPortDirection+0x5e>
    1af2:	2b 81       	ldd	r18, Y+3	; 0x03
    1af4:	3c 81       	ldd	r19, Y+4	; 0x04
    1af6:	22 30       	cpi	r18, 0x02	; 2
    1af8:	31 05       	cpc	r19, r1
    1afa:	2c f4       	brge	.+10     	; 0x1b06 <GPIO_setupPortDirection+0x3e>
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	9c 81       	ldd	r25, Y+4	; 0x04
    1b00:	00 97       	sbiw	r24, 0x00	; 0
    1b02:	61 f0       	breq	.+24     	; 0x1b1c <GPIO_setupPortDirection+0x54>
    1b04:	1e c0       	rjmp	.+60     	; 0x1b42 <GPIO_setupPortDirection+0x7a>
    1b06:	2b 81       	ldd	r18, Y+3	; 0x03
    1b08:	3c 81       	ldd	r19, Y+4	; 0x04
    1b0a:	22 30       	cpi	r18, 0x02	; 2
    1b0c:	31 05       	cpc	r19, r1
    1b0e:	81 f0       	breq	.+32     	; 0x1b30 <GPIO_setupPortDirection+0x68>
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	83 30       	cpi	r24, 0x03	; 3
    1b16:	91 05       	cpc	r25, r1
    1b18:	81 f0       	breq	.+32     	; 0x1b3a <GPIO_setupPortDirection+0x72>
    1b1a:	13 c0       	rjmp	.+38     	; 0x1b42 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1b1c:	ea e3       	ldi	r30, 0x3A	; 58
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	80 83       	st	Z, r24
    1b24:	0e c0       	rjmp	.+28     	; 0x1b42 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1b26:	e7 e3       	ldi	r30, 0x37	; 55
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b2c:	80 83       	st	Z, r24
    1b2e:	09 c0       	rjmp	.+18     	; 0x1b42 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1b30:	e4 e3       	ldi	r30, 0x34	; 52
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	8a 81       	ldd	r24, Y+2	; 0x02
    1b36:	80 83       	st	Z, r24
    1b38:	04 c0       	rjmp	.+8      	; 0x1b42 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1b3a:	e1 e3       	ldi	r30, 0x31	; 49
    1b3c:	f0 e0       	ldi	r31, 0x00	; 0
    1b3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b40:	80 83       	st	Z, r24
			break;
		}
	}
}
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	0f 90       	pop	r0
    1b4a:	cf 91       	pop	r28
    1b4c:	df 91       	pop	r29
    1b4e:	08 95       	ret

00001b50 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1b50:	df 93       	push	r29
    1b52:	cf 93       	push	r28
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <GPIO_writePort+0x6>
    1b56:	00 d0       	rcall	.+0      	; 0x1b58 <GPIO_writePort+0x8>
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	89 83       	std	Y+1, r24	; 0x01
    1b5e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1b60:	89 81       	ldd	r24, Y+1	; 0x01
    1b62:	84 30       	cpi	r24, 0x04	; 4
    1b64:	90 f5       	brcc	.+100    	; 0x1bca <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1b66:	89 81       	ldd	r24, Y+1	; 0x01
    1b68:	28 2f       	mov	r18, r24
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	3c 83       	std	Y+4, r19	; 0x04
    1b6e:	2b 83       	std	Y+3, r18	; 0x03
    1b70:	8b 81       	ldd	r24, Y+3	; 0x03
    1b72:	9c 81       	ldd	r25, Y+4	; 0x04
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	91 05       	cpc	r25, r1
    1b78:	d1 f0       	breq	.+52     	; 0x1bae <GPIO_writePort+0x5e>
    1b7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b7e:	22 30       	cpi	r18, 0x02	; 2
    1b80:	31 05       	cpc	r19, r1
    1b82:	2c f4       	brge	.+10     	; 0x1b8e <GPIO_writePort+0x3e>
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	00 97       	sbiw	r24, 0x00	; 0
    1b8a:	61 f0       	breq	.+24     	; 0x1ba4 <GPIO_writePort+0x54>
    1b8c:	1e c0       	rjmp	.+60     	; 0x1bca <GPIO_writePort+0x7a>
    1b8e:	2b 81       	ldd	r18, Y+3	; 0x03
    1b90:	3c 81       	ldd	r19, Y+4	; 0x04
    1b92:	22 30       	cpi	r18, 0x02	; 2
    1b94:	31 05       	cpc	r19, r1
    1b96:	81 f0       	breq	.+32     	; 0x1bb8 <GPIO_writePort+0x68>
    1b98:	8b 81       	ldd	r24, Y+3	; 0x03
    1b9a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b9c:	83 30       	cpi	r24, 0x03	; 3
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	81 f0       	breq	.+32     	; 0x1bc2 <GPIO_writePort+0x72>
    1ba2:	13 c0       	rjmp	.+38     	; 0x1bca <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ba4:	eb e3       	ldi	r30, 0x3B	; 59
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	8a 81       	ldd	r24, Y+2	; 0x02
    1baa:	80 83       	st	Z, r24
    1bac:	0e c0       	rjmp	.+28     	; 0x1bca <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1bae:	e8 e3       	ldi	r30, 0x38	; 56
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    1bb4:	80 83       	st	Z, r24
    1bb6:	09 c0       	rjmp	.+18     	; 0x1bca <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1bb8:	e5 e3       	ldi	r30, 0x35	; 53
    1bba:	f0 e0       	ldi	r31, 0x00	; 0
    1bbc:	8a 81       	ldd	r24, Y+2	; 0x02
    1bbe:	80 83       	st	Z, r24
    1bc0:	04 c0       	rjmp	.+8      	; 0x1bca <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1bc2:	e2 e3       	ldi	r30, 0x32	; 50
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	80 83       	st	Z, r24
			break;
		}
	}
}
    1bca:	0f 90       	pop	r0
    1bcc:	0f 90       	pop	r0
    1bce:	0f 90       	pop	r0
    1bd0:	0f 90       	pop	r0
    1bd2:	cf 91       	pop	r28
    1bd4:	df 91       	pop	r29
    1bd6:	08 95       	ret

00001bd8 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1bd8:	df 93       	push	r29
    1bda:	cf 93       	push	r28
    1bdc:	00 d0       	rcall	.+0      	; 0x1bde <GPIO_readPort+0x6>
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <GPIO_readPort+0x8>
    1be0:	cd b7       	in	r28, 0x3d	; 61
    1be2:	de b7       	in	r29, 0x3e	; 62
    1be4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1be6:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1be8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bea:	84 30       	cpi	r24, 0x04	; 4
    1bec:	90 f5       	brcc	.+100    	; 0x1c52 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1bee:	8a 81       	ldd	r24, Y+2	; 0x02
    1bf0:	28 2f       	mov	r18, r24
    1bf2:	30 e0       	ldi	r19, 0x00	; 0
    1bf4:	3c 83       	std	Y+4, r19	; 0x04
    1bf6:	2b 83       	std	Y+3, r18	; 0x03
    1bf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfc:	81 30       	cpi	r24, 0x01	; 1
    1bfe:	91 05       	cpc	r25, r1
    1c00:	d1 f0       	breq	.+52     	; 0x1c36 <GPIO_readPort+0x5e>
    1c02:	2b 81       	ldd	r18, Y+3	; 0x03
    1c04:	3c 81       	ldd	r19, Y+4	; 0x04
    1c06:	22 30       	cpi	r18, 0x02	; 2
    1c08:	31 05       	cpc	r19, r1
    1c0a:	2c f4       	brge	.+10     	; 0x1c16 <GPIO_readPort+0x3e>
    1c0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c0e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c10:	00 97       	sbiw	r24, 0x00	; 0
    1c12:	61 f0       	breq	.+24     	; 0x1c2c <GPIO_readPort+0x54>
    1c14:	1e c0       	rjmp	.+60     	; 0x1c52 <GPIO_readPort+0x7a>
    1c16:	2b 81       	ldd	r18, Y+3	; 0x03
    1c18:	3c 81       	ldd	r19, Y+4	; 0x04
    1c1a:	22 30       	cpi	r18, 0x02	; 2
    1c1c:	31 05       	cpc	r19, r1
    1c1e:	81 f0       	breq	.+32     	; 0x1c40 <GPIO_readPort+0x68>
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	83 30       	cpi	r24, 0x03	; 3
    1c26:	91 05       	cpc	r25, r1
    1c28:	81 f0       	breq	.+32     	; 0x1c4a <GPIO_readPort+0x72>
    1c2a:	13 c0       	rjmp	.+38     	; 0x1c52 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1c2c:	e9 e3       	ldi	r30, 0x39	; 57
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	89 83       	std	Y+1, r24	; 0x01
    1c34:	0e c0       	rjmp	.+28     	; 0x1c52 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1c36:	e6 e3       	ldi	r30, 0x36	; 54
    1c38:	f0 e0       	ldi	r31, 0x00	; 0
    1c3a:	80 81       	ld	r24, Z
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	09 c0       	rjmp	.+18     	; 0x1c52 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1c40:	e3 e3       	ldi	r30, 0x33	; 51
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 81       	ld	r24, Z
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	04 c0       	rjmp	.+8      	; 0x1c52 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1c4a:	e0 e3       	ldi	r30, 0x30	; 48
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1c52:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	cf 91       	pop	r28
    1c5e:	df 91       	pop	r29
    1c60:	08 95       	ret

00001c62 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1c62:	df 93       	push	r29
    1c64:	cf 93       	push	r28
    1c66:	00 d0       	rcall	.+0      	; 0x1c68 <KEYPAD_getPressedKey+0x6>
    1c68:	0f 92       	push	r0
    1c6a:	cd b7       	in	r28, 0x3d	; 61
    1c6c:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1c6e:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1c70:	1b 82       	std	Y+3, r1	; 0x03
    1c72:	43 c0       	rjmp	.+134    	; 0x1cfa <KEYPAD_getPressedKey+0x98>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1c74:	81 e0       	ldi	r24, 0x01	; 1
    1c76:	60 e0       	ldi	r22, 0x00	; 0
    1c78:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1c7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7e:	98 2f       	mov	r25, r24
    1c80:	9c 5f       	subi	r25, 0xFC	; 252
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	69 2f       	mov	r22, r25
    1c86:	41 e0       	ldi	r20, 0x01	; 1
    1c88:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <GPIO_setupPinDirection>
			
#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1c8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c8e:	88 2f       	mov	r24, r24
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	9c 01       	movw	r18, r24
    1c94:	2c 5f       	subi	r18, 0xFC	; 252
    1c96:	3f 4f       	sbci	r19, 0xFF	; 255
    1c98:	81 e0       	ldi	r24, 0x01	; 1
    1c9a:	90 e0       	ldi	r25, 0x00	; 0
    1c9c:	02 c0       	rjmp	.+4      	; 0x1ca2 <KEYPAD_getPressedKey+0x40>
    1c9e:	88 0f       	add	r24, r24
    1ca0:	99 1f       	adc	r25, r25
    1ca2:	2a 95       	dec	r18
    1ca4:	e2 f7       	brpl	.-8      	; 0x1c9e <KEYPAD_getPressedKey+0x3c>
    1ca6:	80 95       	com	r24
    1ca8:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1caa:	81 e0       	ldi	r24, 0x01	; 1
    1cac:	69 81       	ldd	r22, Y+1	; 0x01
    1cae:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1cb2:	1a 82       	std	Y+2, r1	; 0x02
    1cb4:	1c c0       	rjmp	.+56     	; 0x1cee <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	6a 81       	ldd	r22, Y+2	; 0x02
    1cba:	0e 94 c9 0c 	call	0x1992	; 0x1992 <GPIO_readPin>
    1cbe:	88 23       	and	r24, r24
    1cc0:	99 f4       	brne	.+38     	; 0x1ce8 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1cc2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc4:	88 2f       	mov	r24, r24
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	88 0f       	add	r24, r24
    1cca:	99 1f       	adc	r25, r25
    1ccc:	88 0f       	add	r24, r24
    1cce:	99 1f       	adc	r25, r25
    1cd0:	98 2f       	mov	r25, r24
    1cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd4:	89 0f       	add	r24, r25
    1cd6:	8f 5f       	subi	r24, 0xFF	; 255
    1cd8:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}	
}
    1cdc:	0f 90       	pop	r0
    1cde:	0f 90       	pop	r0
    1ce0:	0f 90       	pop	r0
    1ce2:	cf 91       	pop	r28
    1ce4:	df 91       	pop	r29
    1ce6:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1ce8:	8a 81       	ldd	r24, Y+2	; 0x02
    1cea:	8f 5f       	subi	r24, 0xFF	; 255
    1cec:	8a 83       	std	Y+2, r24	; 0x02
    1cee:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf0:	84 30       	cpi	r24, 0x04	; 4
    1cf2:	08 f3       	brcs	.-62     	; 0x1cb6 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1cf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf6:	8f 5f       	subi	r24, 0xFF	; 255
    1cf8:	8b 83       	std	Y+3, r24	; 0x03
    1cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfc:	84 30       	cpi	r24, 0x04	; 4
    1cfe:	08 f4       	brcc	.+2      	; 0x1d02 <KEYPAD_getPressedKey+0xa0>
    1d00:	b9 cf       	rjmp	.-142    	; 0x1c74 <KEYPAD_getPressedKey+0x12>
    1d02:	b6 cf       	rjmp	.-148    	; 0x1c70 <KEYPAD_getPressedKey+0xe>

00001d04 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	00 d0       	rcall	.+0      	; 0x1d0a <KEYPAD_4x4_adjustKeyNumber+0x6>
    1d0a:	00 d0       	rcall	.+0      	; 0x1d0c <KEYPAD_4x4_adjustKeyNumber+0x8>
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
    1d10:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1d12:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1d14:	8a 81       	ldd	r24, Y+2	; 0x02
    1d16:	28 2f       	mov	r18, r24
    1d18:	30 e0       	ldi	r19, 0x00	; 0
    1d1a:	3c 83       	std	Y+4, r19	; 0x04
    1d1c:	2b 83       	std	Y+3, r18	; 0x03
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	88 30       	cpi	r24, 0x08	; 8
    1d24:	91 05       	cpc	r25, r1
    1d26:	09 f4       	brne	.+2      	; 0x1d2a <KEYPAD_4x4_adjustKeyNumber+0x26>
    1d28:	70 c0       	rjmp	.+224    	; 0x1e0a <KEYPAD_4x4_adjustKeyNumber+0x106>
    1d2a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2e:	29 30       	cpi	r18, 0x09	; 9
    1d30:	31 05       	cpc	r19, r1
    1d32:	5c f5       	brge	.+86     	; 0x1d8a <KEYPAD_4x4_adjustKeyNumber+0x86>
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	84 30       	cpi	r24, 0x04	; 4
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	09 f4       	brne	.+2      	; 0x1d40 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1d3e:	59 c0       	rjmp	.+178    	; 0x1df2 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1d40:	2b 81       	ldd	r18, Y+3	; 0x03
    1d42:	3c 81       	ldd	r19, Y+4	; 0x04
    1d44:	25 30       	cpi	r18, 0x05	; 5
    1d46:	31 05       	cpc	r19, r1
    1d48:	9c f4       	brge	.+38     	; 0x1d70 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4e:	82 30       	cpi	r24, 0x02	; 2
    1d50:	91 05       	cpc	r25, r1
    1d52:	09 f4       	brne	.+2      	; 0x1d56 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1d54:	48 c0       	rjmp	.+144    	; 0x1de6 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1d56:	2b 81       	ldd	r18, Y+3	; 0x03
    1d58:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5a:	23 30       	cpi	r18, 0x03	; 3
    1d5c:	31 05       	cpc	r19, r1
    1d5e:	0c f0       	brlt	.+2      	; 0x1d62 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1d60:	45 c0       	rjmp	.+138    	; 0x1dec <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1d62:	8b 81       	ldd	r24, Y+3	; 0x03
    1d64:	9c 81       	ldd	r25, Y+4	; 0x04
    1d66:	81 30       	cpi	r24, 0x01	; 1
    1d68:	91 05       	cpc	r25, r1
    1d6a:	09 f4       	brne	.+2      	; 0x1d6e <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1d6c:	39 c0       	rjmp	.+114    	; 0x1de0 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1d6e:	67 c0       	rjmp	.+206    	; 0x1e3e <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1d70:	2b 81       	ldd	r18, Y+3	; 0x03
    1d72:	3c 81       	ldd	r19, Y+4	; 0x04
    1d74:	26 30       	cpi	r18, 0x06	; 6
    1d76:	31 05       	cpc	r19, r1
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <KEYPAD_4x4_adjustKeyNumber+0x78>
    1d7a:	41 c0       	rjmp	.+130    	; 0x1dfe <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1d7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d80:	87 30       	cpi	r24, 0x07	; 7
    1d82:	91 05       	cpc	r25, r1
    1d84:	0c f0       	brlt	.+2      	; 0x1d88 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1d86:	3e c0       	rjmp	.+124    	; 0x1e04 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1d88:	37 c0       	rjmp	.+110    	; 0x1df8 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1d8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d8e:	2c 30       	cpi	r18, 0x0C	; 12
    1d90:	31 05       	cpc	r19, r1
    1d92:	09 f4       	brne	.+2      	; 0x1d96 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1d94:	46 c0       	rjmp	.+140    	; 0x1e22 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1d96:	8b 81       	ldd	r24, Y+3	; 0x03
    1d98:	9c 81       	ldd	r25, Y+4	; 0x04
    1d9a:	8d 30       	cpi	r24, 0x0D	; 13
    1d9c:	91 05       	cpc	r25, r1
    1d9e:	5c f4       	brge	.+22     	; 0x1db6 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1da0:	2b 81       	ldd	r18, Y+3	; 0x03
    1da2:	3c 81       	ldd	r19, Y+4	; 0x04
    1da4:	2a 30       	cpi	r18, 0x0A	; 10
    1da6:	31 05       	cpc	r19, r1
    1da8:	b1 f1       	breq	.+108    	; 0x1e16 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1daa:	8b 81       	ldd	r24, Y+3	; 0x03
    1dac:	9c 81       	ldd	r25, Y+4	; 0x04
    1dae:	8b 30       	cpi	r24, 0x0B	; 11
    1db0:	91 05       	cpc	r25, r1
    1db2:	a4 f5       	brge	.+104    	; 0x1e1c <KEYPAD_4x4_adjustKeyNumber+0x118>
    1db4:	2d c0       	rjmp	.+90     	; 0x1e10 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1db6:	2b 81       	ldd	r18, Y+3	; 0x03
    1db8:	3c 81       	ldd	r19, Y+4	; 0x04
    1dba:	2e 30       	cpi	r18, 0x0E	; 14
    1dbc:	31 05       	cpc	r19, r1
    1dbe:	b9 f1       	breq	.+110    	; 0x1e2e <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1dc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc4:	8e 30       	cpi	r24, 0x0E	; 14
    1dc6:	91 05       	cpc	r25, r1
    1dc8:	7c f1       	brlt	.+94     	; 0x1e28 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1dca:	2b 81       	ldd	r18, Y+3	; 0x03
    1dcc:	3c 81       	ldd	r19, Y+4	; 0x04
    1dce:	2f 30       	cpi	r18, 0x0F	; 15
    1dd0:	31 05       	cpc	r19, r1
    1dd2:	79 f1       	breq	.+94     	; 0x1e32 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1dd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd8:	80 31       	cpi	r24, 0x10	; 16
    1dda:	91 05       	cpc	r25, r1
    1ddc:	69 f1       	breq	.+90     	; 0x1e38 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1dde:	2f c0       	rjmp	.+94     	; 0x1e3e <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1de0:	87 e0       	ldi	r24, 0x07	; 7
    1de2:	89 83       	std	Y+1, r24	; 0x01
    1de4:	2e c0       	rjmp	.+92     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1de6:	88 e0       	ldi	r24, 0x08	; 8
    1de8:	89 83       	std	Y+1, r24	; 0x01
    1dea:	2b c0       	rjmp	.+86     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1dec:	89 e0       	ldi	r24, 0x09	; 9
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	28 c0       	rjmp	.+80     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1df2:	85 e2       	ldi	r24, 0x25	; 37
    1df4:	89 83       	std	Y+1, r24	; 0x01
    1df6:	25 c0       	rjmp	.+74     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1df8:	84 e0       	ldi	r24, 0x04	; 4
    1dfa:	89 83       	std	Y+1, r24	; 0x01
    1dfc:	22 c0       	rjmp	.+68     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1dfe:	85 e0       	ldi	r24, 0x05	; 5
    1e00:	89 83       	std	Y+1, r24	; 0x01
    1e02:	1f c0       	rjmp	.+62     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1e04:	86 e0       	ldi	r24, 0x06	; 6
    1e06:	89 83       	std	Y+1, r24	; 0x01
    1e08:	1c c0       	rjmp	.+56     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1e0a:	8a e2       	ldi	r24, 0x2A	; 42
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	19 c0       	rjmp	.+50     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1e10:	81 e0       	ldi	r24, 0x01	; 1
    1e12:	89 83       	std	Y+1, r24	; 0x01
    1e14:	16 c0       	rjmp	.+44     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	13 c0       	rjmp	.+38     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1e1c:	83 e0       	ldi	r24, 0x03	; 3
    1e1e:	89 83       	std	Y+1, r24	; 0x01
    1e20:	10 c0       	rjmp	.+32     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1e22:	8d e2       	ldi	r24, 0x2D	; 45
    1e24:	89 83       	std	Y+1, r24	; 0x01
    1e26:	0d c0       	rjmp	.+26     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1e28:	8d e0       	ldi	r24, 0x0D	; 13
    1e2a:	89 83       	std	Y+1, r24	; 0x01
    1e2c:	0a c0       	rjmp	.+20     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1e2e:	19 82       	std	Y+1, r1	; 0x01
    1e30:	08 c0       	rjmp	.+16     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1e32:	8d e3       	ldi	r24, 0x3D	; 61
    1e34:	89 83       	std	Y+1, r24	; 0x01
    1e36:	05 c0       	rjmp	.+10     	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1e38:	8b e2       	ldi	r24, 0x2B	; 43
    1e3a:	89 83       	std	Y+1, r24	; 0x01
    1e3c:	02 c0       	rjmp	.+4      	; 0x1e42 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e40:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1e42:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	0f 90       	pop	r0
    1e4a:	0f 90       	pop	r0
    1e4c:	cf 91       	pop	r28
    1e4e:	df 91       	pop	r29
    1e50:	08 95       	ret

00001e52 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1e52:	df 93       	push	r29
    1e54:	cf 93       	push	r28
    1e56:	cd b7       	in	r28, 0x3d	; 61
    1e58:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	60 e0       	ldi	r22, 0x00	; 0
    1e5e:	41 e0       	ldi	r20, 0x01	; 1
    1e60:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	61 e0       	ldi	r22, 0x01	; 1
    1e68:	41 e0       	ldi	r20, 0x01	; 1
    1e6a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
    1e70:	62 e0       	ldi	r22, 0x02	; 2
    1e72:	41 e0       	ldi	r20, 0x01	; 1
    1e74:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <GPIO_setupPinDirection>
	LCD_sendCommand(LCD_GO_TO_HOME);
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* use 2-line lcd + 4-bit Data Mode + 5*7 dot display Mode */

#elif (LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1e78:	80 e0       	ldi	r24, 0x00	; 0
    1e7a:	6f ef       	ldi	r22, 0xFF	; 255
    1e7c:	0e 94 64 0d 	call	0x1ac8	; 0x1ac8 <GPIO_setupPortDirection>
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1e80:	88 e3       	ldi	r24, 0x38	; 56
    1e82:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_sendCommand>
#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1e86:	8c e0       	ldi	r24, 0x0C	; 12
    1e88:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_sendCommand>
}
    1e92:	cf 91       	pop	r28
    1e94:	df 91       	pop	r29
    1e96:	08 95       	ret

00001e98 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1e98:	df 93       	push	r29
    1e9a:	cf 93       	push	r28
    1e9c:	cd b7       	in	r28, 0x3d	; 61
    1e9e:	de b7       	in	r29, 0x3e	; 62
    1ea0:	ea 97       	sbiw	r28, 0x3a	; 58
    1ea2:	0f b6       	in	r0, 0x3f	; 63
    1ea4:	f8 94       	cli
    1ea6:	de bf       	out	0x3e, r29	; 62
    1ea8:	0f be       	out	0x3f, r0	; 63
    1eaa:	cd bf       	out	0x3d, r28	; 61
    1eac:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    1eae:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1eb0:	82 e0       	ldi	r24, 0x02	; 2
    1eb2:	60 e0       	ldi	r22, 0x00	; 0
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	0e 94 de 0b 	call	0x17bc	; 0x17bc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1eba:	82 e0       	ldi	r24, 0x02	; 2
    1ebc:	61 e0       	ldi	r22, 0x01	; 1
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <GPIO_writePin>
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	a0 e8       	ldi	r26, 0x80	; 128
    1eca:	bf e3       	ldi	r27, 0x3F	; 63
    1ecc:	8d ab       	std	Y+53, r24	; 0x35
    1ece:	9e ab       	std	Y+54, r25	; 0x36
    1ed0:	af ab       	std	Y+55, r26	; 0x37
    1ed2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ed4:	6d a9       	ldd	r22, Y+53	; 0x35
    1ed6:	7e a9       	ldd	r23, Y+54	; 0x36
    1ed8:	8f a9       	ldd	r24, Y+55	; 0x37
    1eda:	98 ad       	ldd	r25, Y+56	; 0x38
    1edc:	20 e0       	ldi	r18, 0x00	; 0
    1ede:	30 e0       	ldi	r19, 0x00	; 0
    1ee0:	4a ef       	ldi	r20, 0xFA	; 250
    1ee2:	54 e4       	ldi	r21, 0x44	; 68
    1ee4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee8:	dc 01       	movw	r26, r24
    1eea:	cb 01       	movw	r24, r22
    1eec:	89 ab       	std	Y+49, r24	; 0x31
    1eee:	9a ab       	std	Y+50, r25	; 0x32
    1ef0:	ab ab       	std	Y+51, r26	; 0x33
    1ef2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ef4:	69 a9       	ldd	r22, Y+49	; 0x31
    1ef6:	7a a9       	ldd	r23, Y+50	; 0x32
    1ef8:	8b a9       	ldd	r24, Y+51	; 0x33
    1efa:	9c a9       	ldd	r25, Y+52	; 0x34
    1efc:	20 e0       	ldi	r18, 0x00	; 0
    1efe:	30 e0       	ldi	r19, 0x00	; 0
    1f00:	40 e8       	ldi	r20, 0x80	; 128
    1f02:	5f e3       	ldi	r21, 0x3F	; 63
    1f04:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f08:	88 23       	and	r24, r24
    1f0a:	2c f4       	brge	.+10     	; 0x1f16 <LCD_sendCommand+0x7e>
		__ticks = 1;
    1f0c:	81 e0       	ldi	r24, 0x01	; 1
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	98 ab       	std	Y+48, r25	; 0x30
    1f12:	8f a7       	std	Y+47, r24	; 0x2f
    1f14:	3f c0       	rjmp	.+126    	; 0x1f94 <LCD_sendCommand+0xfc>
	else if (__tmp > 65535)
    1f16:	69 a9       	ldd	r22, Y+49	; 0x31
    1f18:	7a a9       	ldd	r23, Y+50	; 0x32
    1f1a:	8b a9       	ldd	r24, Y+51	; 0x33
    1f1c:	9c a9       	ldd	r25, Y+52	; 0x34
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	3f ef       	ldi	r19, 0xFF	; 255
    1f22:	4f e7       	ldi	r20, 0x7F	; 127
    1f24:	57 e4       	ldi	r21, 0x47	; 71
    1f26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f2a:	18 16       	cp	r1, r24
    1f2c:	4c f5       	brge	.+82     	; 0x1f80 <LCD_sendCommand+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f2e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f30:	7e a9       	ldd	r23, Y+54	; 0x36
    1f32:	8f a9       	ldd	r24, Y+55	; 0x37
    1f34:	98 ad       	ldd	r25, Y+56	; 0x38
    1f36:	20 e0       	ldi	r18, 0x00	; 0
    1f38:	30 e0       	ldi	r19, 0x00	; 0
    1f3a:	40 e2       	ldi	r20, 0x20	; 32
    1f3c:	51 e4       	ldi	r21, 0x41	; 65
    1f3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f42:	dc 01       	movw	r26, r24
    1f44:	cb 01       	movw	r24, r22
    1f46:	bc 01       	movw	r22, r24
    1f48:	cd 01       	movw	r24, r26
    1f4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f4e:	dc 01       	movw	r26, r24
    1f50:	cb 01       	movw	r24, r22
    1f52:	98 ab       	std	Y+48, r25	; 0x30
    1f54:	8f a7       	std	Y+47, r24	; 0x2f
    1f56:	0f c0       	rjmp	.+30     	; 0x1f76 <LCD_sendCommand+0xde>
    1f58:	88 ec       	ldi	r24, 0xC8	; 200
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	9e a7       	std	Y+46, r25	; 0x2e
    1f5e:	8d a7       	std	Y+45, r24	; 0x2d
    1f60:	8d a5       	ldd	r24, Y+45	; 0x2d
    1f62:	9e a5       	ldd	r25, Y+46	; 0x2e
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <LCD_sendCommand+0xcc>
    1f68:	9e a7       	std	Y+46, r25	; 0x2e
    1f6a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f6e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f70:	01 97       	sbiw	r24, 0x01	; 1
    1f72:	98 ab       	std	Y+48, r25	; 0x30
    1f74:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f76:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f78:	98 a9       	ldd	r25, Y+48	; 0x30
    1f7a:	00 97       	sbiw	r24, 0x00	; 0
    1f7c:	69 f7       	brne	.-38     	; 0x1f58 <LCD_sendCommand+0xc0>
    1f7e:	14 c0       	rjmp	.+40     	; 0x1fa8 <LCD_sendCommand+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f80:	69 a9       	ldd	r22, Y+49	; 0x31
    1f82:	7a a9       	ldd	r23, Y+50	; 0x32
    1f84:	8b a9       	ldd	r24, Y+51	; 0x33
    1f86:	9c a9       	ldd	r25, Y+52	; 0x34
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	98 ab       	std	Y+48, r25	; 0x30
    1f92:	8f a7       	std	Y+47, r24	; 0x2f
    1f94:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f96:	98 a9       	ldd	r25, Y+48	; 0x30
    1f98:	9c a7       	std	Y+44, r25	; 0x2c
    1f9a:	8b a7       	std	Y+43, r24	; 0x2b
    1f9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fa0:	01 97       	sbiw	r24, 0x01	; 1
    1fa2:	f1 f7       	brne	.-4      	; 0x1fa0 <LCD_sendCommand+0x108>
    1fa4:	9c a7       	std	Y+44, r25	; 0x2c
    1fa6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1fa8:	82 e0       	ldi	r24, 0x02	; 2
    1faa:	62 e0       	ldi	r22, 0x02	; 2
    1fac:	41 e0       	ldi	r20, 0x01	; 1
    1fae:	0e 94 de 0b 	call	0x17bc	; 0x17bc <GPIO_writePin>
    1fb2:	80 e0       	ldi	r24, 0x00	; 0
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	a0 e8       	ldi	r26, 0x80	; 128
    1fb8:	bf e3       	ldi	r27, 0x3F	; 63
    1fba:	8f a3       	std	Y+39, r24	; 0x27
    1fbc:	98 a7       	std	Y+40, r25	; 0x28
    1fbe:	a9 a7       	std	Y+41, r26	; 0x29
    1fc0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fc2:	6f a1       	ldd	r22, Y+39	; 0x27
    1fc4:	78 a5       	ldd	r23, Y+40	; 0x28
    1fc6:	89 a5       	ldd	r24, Y+41	; 0x29
    1fc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    1fca:	20 e0       	ldi	r18, 0x00	; 0
    1fcc:	30 e0       	ldi	r19, 0x00	; 0
    1fce:	4a ef       	ldi	r20, 0xFA	; 250
    1fd0:	54 e4       	ldi	r21, 0x44	; 68
    1fd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	8b a3       	std	Y+35, r24	; 0x23
    1fdc:	9c a3       	std	Y+36, r25	; 0x24
    1fde:	ad a3       	std	Y+37, r26	; 0x25
    1fe0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1fe2:	6b a1       	ldd	r22, Y+35	; 0x23
    1fe4:	7c a1       	ldd	r23, Y+36	; 0x24
    1fe6:	8d a1       	ldd	r24, Y+37	; 0x25
    1fe8:	9e a1       	ldd	r25, Y+38	; 0x26
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	30 e0       	ldi	r19, 0x00	; 0
    1fee:	40 e8       	ldi	r20, 0x80	; 128
    1ff0:	5f e3       	ldi	r21, 0x3F	; 63
    1ff2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ff6:	88 23       	and	r24, r24
    1ff8:	2c f4       	brge	.+10     	; 0x2004 <LCD_sendCommand+0x16c>
		__ticks = 1;
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	9a a3       	std	Y+34, r25	; 0x22
    2000:	89 a3       	std	Y+33, r24	; 0x21
    2002:	3f c0       	rjmp	.+126    	; 0x2082 <LCD_sendCommand+0x1ea>
	else if (__tmp > 65535)
    2004:	6b a1       	ldd	r22, Y+35	; 0x23
    2006:	7c a1       	ldd	r23, Y+36	; 0x24
    2008:	8d a1       	ldd	r24, Y+37	; 0x25
    200a:	9e a1       	ldd	r25, Y+38	; 0x26
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	3f ef       	ldi	r19, 0xFF	; 255
    2010:	4f e7       	ldi	r20, 0x7F	; 127
    2012:	57 e4       	ldi	r21, 0x47	; 71
    2014:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2018:	18 16       	cp	r1, r24
    201a:	4c f5       	brge	.+82     	; 0x206e <LCD_sendCommand+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    201c:	6f a1       	ldd	r22, Y+39	; 0x27
    201e:	78 a5       	ldd	r23, Y+40	; 0x28
    2020:	89 a5       	ldd	r24, Y+41	; 0x29
    2022:	9a a5       	ldd	r25, Y+42	; 0x2a
    2024:	20 e0       	ldi	r18, 0x00	; 0
    2026:	30 e0       	ldi	r19, 0x00	; 0
    2028:	40 e2       	ldi	r20, 0x20	; 32
    202a:	51 e4       	ldi	r21, 0x41	; 65
    202c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2030:	dc 01       	movw	r26, r24
    2032:	cb 01       	movw	r24, r22
    2034:	bc 01       	movw	r22, r24
    2036:	cd 01       	movw	r24, r26
    2038:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    203c:	dc 01       	movw	r26, r24
    203e:	cb 01       	movw	r24, r22
    2040:	9a a3       	std	Y+34, r25	; 0x22
    2042:	89 a3       	std	Y+33, r24	; 0x21
    2044:	0f c0       	rjmp	.+30     	; 0x2064 <LCD_sendCommand+0x1cc>
    2046:	88 ec       	ldi	r24, 0xC8	; 200
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	98 a3       	std	Y+32, r25	; 0x20
    204c:	8f 8f       	std	Y+31, r24	; 0x1f
    204e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2050:	98 a1       	ldd	r25, Y+32	; 0x20
    2052:	01 97       	sbiw	r24, 0x01	; 1
    2054:	f1 f7       	brne	.-4      	; 0x2052 <LCD_sendCommand+0x1ba>
    2056:	98 a3       	std	Y+32, r25	; 0x20
    2058:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    205a:	89 a1       	ldd	r24, Y+33	; 0x21
    205c:	9a a1       	ldd	r25, Y+34	; 0x22
    205e:	01 97       	sbiw	r24, 0x01	; 1
    2060:	9a a3       	std	Y+34, r25	; 0x22
    2062:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2064:	89 a1       	ldd	r24, Y+33	; 0x21
    2066:	9a a1       	ldd	r25, Y+34	; 0x22
    2068:	00 97       	sbiw	r24, 0x00	; 0
    206a:	69 f7       	brne	.-38     	; 0x2046 <LCD_sendCommand+0x1ae>
    206c:	14 c0       	rjmp	.+40     	; 0x2096 <LCD_sendCommand+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206e:	6b a1       	ldd	r22, Y+35	; 0x23
    2070:	7c a1       	ldd	r23, Y+36	; 0x24
    2072:	8d a1       	ldd	r24, Y+37	; 0x25
    2074:	9e a1       	ldd	r25, Y+38	; 0x26
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9a a3       	std	Y+34, r25	; 0x22
    2080:	89 a3       	std	Y+33, r24	; 0x21
    2082:	89 a1       	ldd	r24, Y+33	; 0x21
    2084:	9a a1       	ldd	r25, Y+34	; 0x22
    2086:	9e 8f       	std	Y+30, r25	; 0x1e
    2088:	8d 8f       	std	Y+29, r24	; 0x1d
    208a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    208c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_sendCommand+0x1f6>
    2092:	9e 8f       	std	Y+30, r25	; 0x1e
    2094:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2096:	80 e0       	ldi	r24, 0x00	; 0
    2098:	6a ad       	ldd	r22, Y+58	; 0x3a
    209a:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <GPIO_writePort>
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	a0 e8       	ldi	r26, 0x80	; 128
    20a4:	bf e3       	ldi	r27, 0x3F	; 63
    20a6:	89 8f       	std	Y+25, r24	; 0x19
    20a8:	9a 8f       	std	Y+26, r25	; 0x1a
    20aa:	ab 8f       	std	Y+27, r26	; 0x1b
    20ac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ae:	69 8d       	ldd	r22, Y+25	; 0x19
    20b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    20b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    20b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    20b6:	20 e0       	ldi	r18, 0x00	; 0
    20b8:	30 e0       	ldi	r19, 0x00	; 0
    20ba:	4a ef       	ldi	r20, 0xFA	; 250
    20bc:	54 e4       	ldi	r21, 0x44	; 68
    20be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	8d 8b       	std	Y+21, r24	; 0x15
    20c8:	9e 8b       	std	Y+22, r25	; 0x16
    20ca:	af 8b       	std	Y+23, r26	; 0x17
    20cc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    20ce:	6d 89       	ldd	r22, Y+21	; 0x15
    20d0:	7e 89       	ldd	r23, Y+22	; 0x16
    20d2:	8f 89       	ldd	r24, Y+23	; 0x17
    20d4:	98 8d       	ldd	r25, Y+24	; 0x18
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e8       	ldi	r20, 0x80	; 128
    20dc:	5f e3       	ldi	r21, 0x3F	; 63
    20de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20e2:	88 23       	and	r24, r24
    20e4:	2c f4       	brge	.+10     	; 0x20f0 <LCD_sendCommand+0x258>
		__ticks = 1;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	90 e0       	ldi	r25, 0x00	; 0
    20ea:	9c 8b       	std	Y+20, r25	; 0x14
    20ec:	8b 8b       	std	Y+19, r24	; 0x13
    20ee:	3f c0       	rjmp	.+126    	; 0x216e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    20f0:	6d 89       	ldd	r22, Y+21	; 0x15
    20f2:	7e 89       	ldd	r23, Y+22	; 0x16
    20f4:	8f 89       	ldd	r24, Y+23	; 0x17
    20f6:	98 8d       	ldd	r25, Y+24	; 0x18
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	3f ef       	ldi	r19, 0xFF	; 255
    20fc:	4f e7       	ldi	r20, 0x7F	; 127
    20fe:	57 e4       	ldi	r21, 0x47	; 71
    2100:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2104:	18 16       	cp	r1, r24
    2106:	4c f5       	brge	.+82     	; 0x215a <LCD_sendCommand+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2108:	69 8d       	ldd	r22, Y+25	; 0x19
    210a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    210c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    210e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2110:	20 e0       	ldi	r18, 0x00	; 0
    2112:	30 e0       	ldi	r19, 0x00	; 0
    2114:	40 e2       	ldi	r20, 0x20	; 32
    2116:	51 e4       	ldi	r21, 0x41	; 65
    2118:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211c:	dc 01       	movw	r26, r24
    211e:	cb 01       	movw	r24, r22
    2120:	bc 01       	movw	r22, r24
    2122:	cd 01       	movw	r24, r26
    2124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2128:	dc 01       	movw	r26, r24
    212a:	cb 01       	movw	r24, r22
    212c:	9c 8b       	std	Y+20, r25	; 0x14
    212e:	8b 8b       	std	Y+19, r24	; 0x13
    2130:	0f c0       	rjmp	.+30     	; 0x2150 <LCD_sendCommand+0x2b8>
    2132:	88 ec       	ldi	r24, 0xC8	; 200
    2134:	90 e0       	ldi	r25, 0x00	; 0
    2136:	9a 8b       	std	Y+18, r25	; 0x12
    2138:	89 8b       	std	Y+17, r24	; 0x11
    213a:	89 89       	ldd	r24, Y+17	; 0x11
    213c:	9a 89       	ldd	r25, Y+18	; 0x12
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	f1 f7       	brne	.-4      	; 0x213e <LCD_sendCommand+0x2a6>
    2142:	9a 8b       	std	Y+18, r25	; 0x12
    2144:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2146:	8b 89       	ldd	r24, Y+19	; 0x13
    2148:	9c 89       	ldd	r25, Y+20	; 0x14
    214a:	01 97       	sbiw	r24, 0x01	; 1
    214c:	9c 8b       	std	Y+20, r25	; 0x14
    214e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2150:	8b 89       	ldd	r24, Y+19	; 0x13
    2152:	9c 89       	ldd	r25, Y+20	; 0x14
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	69 f7       	brne	.-38     	; 0x2132 <LCD_sendCommand+0x29a>
    2158:	14 c0       	rjmp	.+40     	; 0x2182 <LCD_sendCommand+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215a:	6d 89       	ldd	r22, Y+21	; 0x15
    215c:	7e 89       	ldd	r23, Y+22	; 0x16
    215e:	8f 89       	ldd	r24, Y+23	; 0x17
    2160:	98 8d       	ldd	r25, Y+24	; 0x18
    2162:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2166:	dc 01       	movw	r26, r24
    2168:	cb 01       	movw	r24, r22
    216a:	9c 8b       	std	Y+20, r25	; 0x14
    216c:	8b 8b       	std	Y+19, r24	; 0x13
    216e:	8b 89       	ldd	r24, Y+19	; 0x13
    2170:	9c 89       	ldd	r25, Y+20	; 0x14
    2172:	98 8b       	std	Y+16, r25	; 0x10
    2174:	8f 87       	std	Y+15, r24	; 0x0f
    2176:	8f 85       	ldd	r24, Y+15	; 0x0f
    2178:	98 89       	ldd	r25, Y+16	; 0x10
    217a:	01 97       	sbiw	r24, 0x01	; 1
    217c:	f1 f7       	brne	.-4      	; 0x217a <LCD_sendCommand+0x2e2>
    217e:	98 8b       	std	Y+16, r25	; 0x10
    2180:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2182:	82 e0       	ldi	r24, 0x02	; 2
    2184:	62 e0       	ldi	r22, 0x02	; 2
    2186:	40 e0       	ldi	r20, 0x00	; 0
    2188:	0e 94 de 0b 	call	0x17bc	; 0x17bc <GPIO_writePin>
    218c:	80 e0       	ldi	r24, 0x00	; 0
    218e:	90 e0       	ldi	r25, 0x00	; 0
    2190:	a0 e8       	ldi	r26, 0x80	; 128
    2192:	bf e3       	ldi	r27, 0x3F	; 63
    2194:	8b 87       	std	Y+11, r24	; 0x0b
    2196:	9c 87       	std	Y+12, r25	; 0x0c
    2198:	ad 87       	std	Y+13, r26	; 0x0d
    219a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219c:	6b 85       	ldd	r22, Y+11	; 0x0b
    219e:	7c 85       	ldd	r23, Y+12	; 0x0c
    21a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    21a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    21a4:	20 e0       	ldi	r18, 0x00	; 0
    21a6:	30 e0       	ldi	r19, 0x00	; 0
    21a8:	4a ef       	ldi	r20, 0xFA	; 250
    21aa:	54 e4       	ldi	r21, 0x44	; 68
    21ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b0:	dc 01       	movw	r26, r24
    21b2:	cb 01       	movw	r24, r22
    21b4:	8f 83       	std	Y+7, r24	; 0x07
    21b6:	98 87       	std	Y+8, r25	; 0x08
    21b8:	a9 87       	std	Y+9, r26	; 0x09
    21ba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21bc:	6f 81       	ldd	r22, Y+7	; 0x07
    21be:	78 85       	ldd	r23, Y+8	; 0x08
    21c0:	89 85       	ldd	r24, Y+9	; 0x09
    21c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    21c4:	20 e0       	ldi	r18, 0x00	; 0
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	40 e8       	ldi	r20, 0x80	; 128
    21ca:	5f e3       	ldi	r21, 0x3F	; 63
    21cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21d0:	88 23       	and	r24, r24
    21d2:	2c f4       	brge	.+10     	; 0x21de <LCD_sendCommand+0x346>
		__ticks = 1;
    21d4:	81 e0       	ldi	r24, 0x01	; 1
    21d6:	90 e0       	ldi	r25, 0x00	; 0
    21d8:	9e 83       	std	Y+6, r25	; 0x06
    21da:	8d 83       	std	Y+5, r24	; 0x05
    21dc:	3f c0       	rjmp	.+126    	; 0x225c <LCD_sendCommand+0x3c4>
	else if (__tmp > 65535)
    21de:	6f 81       	ldd	r22, Y+7	; 0x07
    21e0:	78 85       	ldd	r23, Y+8	; 0x08
    21e2:	89 85       	ldd	r24, Y+9	; 0x09
    21e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e6:	20 e0       	ldi	r18, 0x00	; 0
    21e8:	3f ef       	ldi	r19, 0xFF	; 255
    21ea:	4f e7       	ldi	r20, 0x7F	; 127
    21ec:	57 e4       	ldi	r21, 0x47	; 71
    21ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f2:	18 16       	cp	r1, r24
    21f4:	4c f5       	brge	.+82     	; 0x2248 <LCD_sendCommand+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21fa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21fc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21fe:	20 e0       	ldi	r18, 0x00	; 0
    2200:	30 e0       	ldi	r19, 0x00	; 0
    2202:	40 e2       	ldi	r20, 0x20	; 32
    2204:	51 e4       	ldi	r21, 0x41	; 65
    2206:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220a:	dc 01       	movw	r26, r24
    220c:	cb 01       	movw	r24, r22
    220e:	bc 01       	movw	r22, r24
    2210:	cd 01       	movw	r24, r26
    2212:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2216:	dc 01       	movw	r26, r24
    2218:	cb 01       	movw	r24, r22
    221a:	9e 83       	std	Y+6, r25	; 0x06
    221c:	8d 83       	std	Y+5, r24	; 0x05
    221e:	0f c0       	rjmp	.+30     	; 0x223e <LCD_sendCommand+0x3a6>
    2220:	88 ec       	ldi	r24, 0xC8	; 200
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	9c 83       	std	Y+4, r25	; 0x04
    2226:	8b 83       	std	Y+3, r24	; 0x03
    2228:	8b 81       	ldd	r24, Y+3	; 0x03
    222a:	9c 81       	ldd	r25, Y+4	; 0x04
    222c:	01 97       	sbiw	r24, 0x01	; 1
    222e:	f1 f7       	brne	.-4      	; 0x222c <LCD_sendCommand+0x394>
    2230:	9c 83       	std	Y+4, r25	; 0x04
    2232:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2234:	8d 81       	ldd	r24, Y+5	; 0x05
    2236:	9e 81       	ldd	r25, Y+6	; 0x06
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	9e 83       	std	Y+6, r25	; 0x06
    223c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    223e:	8d 81       	ldd	r24, Y+5	; 0x05
    2240:	9e 81       	ldd	r25, Y+6	; 0x06
    2242:	00 97       	sbiw	r24, 0x00	; 0
    2244:	69 f7       	brne	.-38     	; 0x2220 <LCD_sendCommand+0x388>
    2246:	14 c0       	rjmp	.+40     	; 0x2270 <LCD_sendCommand+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2248:	6f 81       	ldd	r22, Y+7	; 0x07
    224a:	78 85       	ldd	r23, Y+8	; 0x08
    224c:	89 85       	ldd	r24, Y+9	; 0x09
    224e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2254:	dc 01       	movw	r26, r24
    2256:	cb 01       	movw	r24, r22
    2258:	9e 83       	std	Y+6, r25	; 0x06
    225a:	8d 83       	std	Y+5, r24	; 0x05
    225c:	8d 81       	ldd	r24, Y+5	; 0x05
    225e:	9e 81       	ldd	r25, Y+6	; 0x06
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01
    2264:	89 81       	ldd	r24, Y+1	; 0x01
    2266:	9a 81       	ldd	r25, Y+2	; 0x02
    2268:	01 97       	sbiw	r24, 0x01	; 1
    226a:	f1 f7       	brne	.-4      	; 0x2268 <LCD_sendCommand+0x3d0>
    226c:	9a 83       	std	Y+2, r25	; 0x02
    226e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2270:	ea 96       	adiw	r28, 0x3a	; 58
    2272:	0f b6       	in	r0, 0x3f	; 63
    2274:	f8 94       	cli
    2276:	de bf       	out	0x3e, r29	; 62
    2278:	0f be       	out	0x3f, r0	; 63
    227a:	cd bf       	out	0x3d, r28	; 61
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	ea 97       	sbiw	r28, 0x3a	; 58
    228c:	0f b6       	in	r0, 0x3f	; 63
    228e:	f8 94       	cli
    2290:	de bf       	out	0x3e, r29	; 62
    2292:	0f be       	out	0x3f, r0	; 63
    2294:	cd bf       	out	0x3d, r28	; 61
    2296:	8a af       	std	Y+58, r24	; 0x3a
	uint8 lcd_port_value = 0;
    2298:	19 ae       	std	Y+57, r1	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    229a:	82 e0       	ldi	r24, 0x02	; 2
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	41 e0       	ldi	r20, 0x01	; 1
    22a0:	0e 94 de 0b 	call	0x17bc	; 0x17bc <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    22a4:	82 e0       	ldi	r24, 0x02	; 2
    22a6:	61 e0       	ldi	r22, 0x01	; 1
    22a8:	40 e0       	ldi	r20, 0x00	; 0
    22aa:	0e 94 de 0b 	call	0x17bc	; 0x17bc <GPIO_writePin>
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	a0 e8       	ldi	r26, 0x80	; 128
    22b4:	bf e3       	ldi	r27, 0x3F	; 63
    22b6:	8d ab       	std	Y+53, r24	; 0x35
    22b8:	9e ab       	std	Y+54, r25	; 0x36
    22ba:	af ab       	std	Y+55, r26	; 0x37
    22bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22be:	6d a9       	ldd	r22, Y+53	; 0x35
    22c0:	7e a9       	ldd	r23, Y+54	; 0x36
    22c2:	8f a9       	ldd	r24, Y+55	; 0x37
    22c4:	98 ad       	ldd	r25, Y+56	; 0x38
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	4a ef       	ldi	r20, 0xFA	; 250
    22cc:	54 e4       	ldi	r21, 0x44	; 68
    22ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22d2:	dc 01       	movw	r26, r24
    22d4:	cb 01       	movw	r24, r22
    22d6:	89 ab       	std	Y+49, r24	; 0x31
    22d8:	9a ab       	std	Y+50, r25	; 0x32
    22da:	ab ab       	std	Y+51, r26	; 0x33
    22dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22de:	69 a9       	ldd	r22, Y+49	; 0x31
    22e0:	7a a9       	ldd	r23, Y+50	; 0x32
    22e2:	8b a9       	ldd	r24, Y+51	; 0x33
    22e4:	9c a9       	ldd	r25, Y+52	; 0x34
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	30 e0       	ldi	r19, 0x00	; 0
    22ea:	40 e8       	ldi	r20, 0x80	; 128
    22ec:	5f e3       	ldi	r21, 0x3F	; 63
    22ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22f2:	88 23       	and	r24, r24
    22f4:	2c f4       	brge	.+10     	; 0x2300 <LCD_displayCharacter+0x7e>
		__ticks = 1;
    22f6:	81 e0       	ldi	r24, 0x01	; 1
    22f8:	90 e0       	ldi	r25, 0x00	; 0
    22fa:	98 ab       	std	Y+48, r25	; 0x30
    22fc:	8f a7       	std	Y+47, r24	; 0x2f
    22fe:	3f c0       	rjmp	.+126    	; 0x237e <LCD_displayCharacter+0xfc>
	else if (__tmp > 65535)
    2300:	69 a9       	ldd	r22, Y+49	; 0x31
    2302:	7a a9       	ldd	r23, Y+50	; 0x32
    2304:	8b a9       	ldd	r24, Y+51	; 0x33
    2306:	9c a9       	ldd	r25, Y+52	; 0x34
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	3f ef       	ldi	r19, 0xFF	; 255
    230c:	4f e7       	ldi	r20, 0x7F	; 127
    230e:	57 e4       	ldi	r21, 0x47	; 71
    2310:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2314:	18 16       	cp	r1, r24
    2316:	4c f5       	brge	.+82     	; 0x236a <LCD_displayCharacter+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2318:	6d a9       	ldd	r22, Y+53	; 0x35
    231a:	7e a9       	ldd	r23, Y+54	; 0x36
    231c:	8f a9       	ldd	r24, Y+55	; 0x37
    231e:	98 ad       	ldd	r25, Y+56	; 0x38
    2320:	20 e0       	ldi	r18, 0x00	; 0
    2322:	30 e0       	ldi	r19, 0x00	; 0
    2324:	40 e2       	ldi	r20, 0x20	; 32
    2326:	51 e4       	ldi	r21, 0x41	; 65
    2328:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	bc 01       	movw	r22, r24
    2332:	cd 01       	movw	r24, r26
    2334:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2338:	dc 01       	movw	r26, r24
    233a:	cb 01       	movw	r24, r22
    233c:	98 ab       	std	Y+48, r25	; 0x30
    233e:	8f a7       	std	Y+47, r24	; 0x2f
    2340:	0f c0       	rjmp	.+30     	; 0x2360 <LCD_displayCharacter+0xde>
    2342:	88 ec       	ldi	r24, 0xC8	; 200
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	9e a7       	std	Y+46, r25	; 0x2e
    2348:	8d a7       	std	Y+45, r24	; 0x2d
    234a:	8d a5       	ldd	r24, Y+45	; 0x2d
    234c:	9e a5       	ldd	r25, Y+46	; 0x2e
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	f1 f7       	brne	.-4      	; 0x234e <LCD_displayCharacter+0xcc>
    2352:	9e a7       	std	Y+46, r25	; 0x2e
    2354:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2356:	8f a5       	ldd	r24, Y+47	; 0x2f
    2358:	98 a9       	ldd	r25, Y+48	; 0x30
    235a:	01 97       	sbiw	r24, 0x01	; 1
    235c:	98 ab       	std	Y+48, r25	; 0x30
    235e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2360:	8f a5       	ldd	r24, Y+47	; 0x2f
    2362:	98 a9       	ldd	r25, Y+48	; 0x30
    2364:	00 97       	sbiw	r24, 0x00	; 0
    2366:	69 f7       	brne	.-38     	; 0x2342 <LCD_displayCharacter+0xc0>
    2368:	14 c0       	rjmp	.+40     	; 0x2392 <LCD_displayCharacter+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    236a:	69 a9       	ldd	r22, Y+49	; 0x31
    236c:	7a a9       	ldd	r23, Y+50	; 0x32
    236e:	8b a9       	ldd	r24, Y+51	; 0x33
    2370:	9c a9       	ldd	r25, Y+52	; 0x34
    2372:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2376:	dc 01       	movw	r26, r24
    2378:	cb 01       	movw	r24, r22
    237a:	98 ab       	std	Y+48, r25	; 0x30
    237c:	8f a7       	std	Y+47, r24	; 0x2f
    237e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2380:	98 a9       	ldd	r25, Y+48	; 0x30
    2382:	9c a7       	std	Y+44, r25	; 0x2c
    2384:	8b a7       	std	Y+43, r24	; 0x2b
    2386:	8b a5       	ldd	r24, Y+43	; 0x2b
    2388:	9c a5       	ldd	r25, Y+44	; 0x2c
    238a:	01 97       	sbiw	r24, 0x01	; 1
    238c:	f1 f7       	brne	.-4      	; 0x238a <LCD_displayCharacter+0x108>
    238e:	9c a7       	std	Y+44, r25	; 0x2c
    2390:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2392:	82 e0       	ldi	r24, 0x02	; 2
    2394:	62 e0       	ldi	r22, 0x02	; 2
    2396:	41 e0       	ldi	r20, 0x01	; 1
    2398:	0e 94 de 0b 	call	0x17bc	; 0x17bc <GPIO_writePin>
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	a0 e8       	ldi	r26, 0x80	; 128
    23a2:	bf e3       	ldi	r27, 0x3F	; 63
    23a4:	8f a3       	std	Y+39, r24	; 0x27
    23a6:	98 a7       	std	Y+40, r25	; 0x28
    23a8:	a9 a7       	std	Y+41, r26	; 0x29
    23aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23ac:	6f a1       	ldd	r22, Y+39	; 0x27
    23ae:	78 a5       	ldd	r23, Y+40	; 0x28
    23b0:	89 a5       	ldd	r24, Y+41	; 0x29
    23b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    23b4:	20 e0       	ldi	r18, 0x00	; 0
    23b6:	30 e0       	ldi	r19, 0x00	; 0
    23b8:	4a ef       	ldi	r20, 0xFA	; 250
    23ba:	54 e4       	ldi	r21, 0x44	; 68
    23bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23c0:	dc 01       	movw	r26, r24
    23c2:	cb 01       	movw	r24, r22
    23c4:	8b a3       	std	Y+35, r24	; 0x23
    23c6:	9c a3       	std	Y+36, r25	; 0x24
    23c8:	ad a3       	std	Y+37, r26	; 0x25
    23ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23cc:	6b a1       	ldd	r22, Y+35	; 0x23
    23ce:	7c a1       	ldd	r23, Y+36	; 0x24
    23d0:	8d a1       	ldd	r24, Y+37	; 0x25
    23d2:	9e a1       	ldd	r25, Y+38	; 0x26
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	30 e0       	ldi	r19, 0x00	; 0
    23d8:	40 e8       	ldi	r20, 0x80	; 128
    23da:	5f e3       	ldi	r21, 0x3F	; 63
    23dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23e0:	88 23       	and	r24, r24
    23e2:	2c f4       	brge	.+10     	; 0x23ee <LCD_displayCharacter+0x16c>
		__ticks = 1;
    23e4:	81 e0       	ldi	r24, 0x01	; 1
    23e6:	90 e0       	ldi	r25, 0x00	; 0
    23e8:	9a a3       	std	Y+34, r25	; 0x22
    23ea:	89 a3       	std	Y+33, r24	; 0x21
    23ec:	3f c0       	rjmp	.+126    	; 0x246c <LCD_displayCharacter+0x1ea>
	else if (__tmp > 65535)
    23ee:	6b a1       	ldd	r22, Y+35	; 0x23
    23f0:	7c a1       	ldd	r23, Y+36	; 0x24
    23f2:	8d a1       	ldd	r24, Y+37	; 0x25
    23f4:	9e a1       	ldd	r25, Y+38	; 0x26
    23f6:	20 e0       	ldi	r18, 0x00	; 0
    23f8:	3f ef       	ldi	r19, 0xFF	; 255
    23fa:	4f e7       	ldi	r20, 0x7F	; 127
    23fc:	57 e4       	ldi	r21, 0x47	; 71
    23fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2402:	18 16       	cp	r1, r24
    2404:	4c f5       	brge	.+82     	; 0x2458 <LCD_displayCharacter+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2406:	6f a1       	ldd	r22, Y+39	; 0x27
    2408:	78 a5       	ldd	r23, Y+40	; 0x28
    240a:	89 a5       	ldd	r24, Y+41	; 0x29
    240c:	9a a5       	ldd	r25, Y+42	; 0x2a
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	40 e2       	ldi	r20, 0x20	; 32
    2414:	51 e4       	ldi	r21, 0x41	; 65
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	bc 01       	movw	r22, r24
    2420:	cd 01       	movw	r24, r26
    2422:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	9a a3       	std	Y+34, r25	; 0x22
    242c:	89 a3       	std	Y+33, r24	; 0x21
    242e:	0f c0       	rjmp	.+30     	; 0x244e <LCD_displayCharacter+0x1cc>
    2430:	88 ec       	ldi	r24, 0xC8	; 200
    2432:	90 e0       	ldi	r25, 0x00	; 0
    2434:	98 a3       	std	Y+32, r25	; 0x20
    2436:	8f 8f       	std	Y+31, r24	; 0x1f
    2438:	8f 8d       	ldd	r24, Y+31	; 0x1f
    243a:	98 a1       	ldd	r25, Y+32	; 0x20
    243c:	01 97       	sbiw	r24, 0x01	; 1
    243e:	f1 f7       	brne	.-4      	; 0x243c <LCD_displayCharacter+0x1ba>
    2440:	98 a3       	std	Y+32, r25	; 0x20
    2442:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2444:	89 a1       	ldd	r24, Y+33	; 0x21
    2446:	9a a1       	ldd	r25, Y+34	; 0x22
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	9a a3       	std	Y+34, r25	; 0x22
    244c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244e:	89 a1       	ldd	r24, Y+33	; 0x21
    2450:	9a a1       	ldd	r25, Y+34	; 0x22
    2452:	00 97       	sbiw	r24, 0x00	; 0
    2454:	69 f7       	brne	.-38     	; 0x2430 <LCD_displayCharacter+0x1ae>
    2456:	14 c0       	rjmp	.+40     	; 0x2480 <LCD_displayCharacter+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2458:	6b a1       	ldd	r22, Y+35	; 0x23
    245a:	7c a1       	ldd	r23, Y+36	; 0x24
    245c:	8d a1       	ldd	r24, Y+37	; 0x25
    245e:	9e a1       	ldd	r25, Y+38	; 0x26
    2460:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2464:	dc 01       	movw	r26, r24
    2466:	cb 01       	movw	r24, r22
    2468:	9a a3       	std	Y+34, r25	; 0x22
    246a:	89 a3       	std	Y+33, r24	; 0x21
    246c:	89 a1       	ldd	r24, Y+33	; 0x21
    246e:	9a a1       	ldd	r25, Y+34	; 0x22
    2470:	9e 8f       	std	Y+30, r25	; 0x1e
    2472:	8d 8f       	std	Y+29, r24	; 0x1d
    2474:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2476:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <LCD_displayCharacter+0x1f6>
    247c:	9e 8f       	std	Y+30, r25	; 0x1e
    247e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif (LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required data to the data bus D0 --> D7 */
    2480:	80 e0       	ldi	r24, 0x00	; 0
    2482:	6a ad       	ldd	r22, Y+58	; 0x3a
    2484:	0e 94 a8 0d 	call	0x1b50	; 0x1b50 <GPIO_writePort>
    2488:	80 e0       	ldi	r24, 0x00	; 0
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	a0 e8       	ldi	r26, 0x80	; 128
    248e:	bf e3       	ldi	r27, 0x3F	; 63
    2490:	89 8f       	std	Y+25, r24	; 0x19
    2492:	9a 8f       	std	Y+26, r25	; 0x1a
    2494:	ab 8f       	std	Y+27, r26	; 0x1b
    2496:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2498:	69 8d       	ldd	r22, Y+25	; 0x19
    249a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    249c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    249e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24a0:	20 e0       	ldi	r18, 0x00	; 0
    24a2:	30 e0       	ldi	r19, 0x00	; 0
    24a4:	4a ef       	ldi	r20, 0xFA	; 250
    24a6:	54 e4       	ldi	r21, 0x44	; 68
    24a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ac:	dc 01       	movw	r26, r24
    24ae:	cb 01       	movw	r24, r22
    24b0:	8d 8b       	std	Y+21, r24	; 0x15
    24b2:	9e 8b       	std	Y+22, r25	; 0x16
    24b4:	af 8b       	std	Y+23, r26	; 0x17
    24b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    24b8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ba:	7e 89       	ldd	r23, Y+22	; 0x16
    24bc:	8f 89       	ldd	r24, Y+23	; 0x17
    24be:	98 8d       	ldd	r25, Y+24	; 0x18
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	30 e0       	ldi	r19, 0x00	; 0
    24c4:	40 e8       	ldi	r20, 0x80	; 128
    24c6:	5f e3       	ldi	r21, 0x3F	; 63
    24c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24cc:	88 23       	and	r24, r24
    24ce:	2c f4       	brge	.+10     	; 0x24da <LCD_displayCharacter+0x258>
		__ticks = 1;
    24d0:	81 e0       	ldi	r24, 0x01	; 1
    24d2:	90 e0       	ldi	r25, 0x00	; 0
    24d4:	9c 8b       	std	Y+20, r25	; 0x14
    24d6:	8b 8b       	std	Y+19, r24	; 0x13
    24d8:	3f c0       	rjmp	.+126    	; 0x2558 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    24da:	6d 89       	ldd	r22, Y+21	; 0x15
    24dc:	7e 89       	ldd	r23, Y+22	; 0x16
    24de:	8f 89       	ldd	r24, Y+23	; 0x17
    24e0:	98 8d       	ldd	r25, Y+24	; 0x18
    24e2:	20 e0       	ldi	r18, 0x00	; 0
    24e4:	3f ef       	ldi	r19, 0xFF	; 255
    24e6:	4f e7       	ldi	r20, 0x7F	; 127
    24e8:	57 e4       	ldi	r21, 0x47	; 71
    24ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24ee:	18 16       	cp	r1, r24
    24f0:	4c f5       	brge	.+82     	; 0x2544 <LCD_displayCharacter+0x2c2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24f2:	69 8d       	ldd	r22, Y+25	; 0x19
    24f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	30 e0       	ldi	r19, 0x00	; 0
    24fe:	40 e2       	ldi	r20, 0x20	; 32
    2500:	51 e4       	ldi	r21, 0x41	; 65
    2502:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2506:	dc 01       	movw	r26, r24
    2508:	cb 01       	movw	r24, r22
    250a:	bc 01       	movw	r22, r24
    250c:	cd 01       	movw	r24, r26
    250e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2512:	dc 01       	movw	r26, r24
    2514:	cb 01       	movw	r24, r22
    2516:	9c 8b       	std	Y+20, r25	; 0x14
    2518:	8b 8b       	std	Y+19, r24	; 0x13
    251a:	0f c0       	rjmp	.+30     	; 0x253a <LCD_displayCharacter+0x2b8>
    251c:	88 ec       	ldi	r24, 0xC8	; 200
    251e:	90 e0       	ldi	r25, 0x00	; 0
    2520:	9a 8b       	std	Y+18, r25	; 0x12
    2522:	89 8b       	std	Y+17, r24	; 0x11
    2524:	89 89       	ldd	r24, Y+17	; 0x11
    2526:	9a 89       	ldd	r25, Y+18	; 0x12
    2528:	01 97       	sbiw	r24, 0x01	; 1
    252a:	f1 f7       	brne	.-4      	; 0x2528 <LCD_displayCharacter+0x2a6>
    252c:	9a 8b       	std	Y+18, r25	; 0x12
    252e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2530:	8b 89       	ldd	r24, Y+19	; 0x13
    2532:	9c 89       	ldd	r25, Y+20	; 0x14
    2534:	01 97       	sbiw	r24, 0x01	; 1
    2536:	9c 8b       	std	Y+20, r25	; 0x14
    2538:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    253a:	8b 89       	ldd	r24, Y+19	; 0x13
    253c:	9c 89       	ldd	r25, Y+20	; 0x14
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	69 f7       	brne	.-38     	; 0x251c <LCD_displayCharacter+0x29a>
    2542:	14 c0       	rjmp	.+40     	; 0x256c <LCD_displayCharacter+0x2ea>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2544:	6d 89       	ldd	r22, Y+21	; 0x15
    2546:	7e 89       	ldd	r23, Y+22	; 0x16
    2548:	8f 89       	ldd	r24, Y+23	; 0x17
    254a:	98 8d       	ldd	r25, Y+24	; 0x18
    254c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2550:	dc 01       	movw	r26, r24
    2552:	cb 01       	movw	r24, r22
    2554:	9c 8b       	std	Y+20, r25	; 0x14
    2556:	8b 8b       	std	Y+19, r24	; 0x13
    2558:	8b 89       	ldd	r24, Y+19	; 0x13
    255a:	9c 89       	ldd	r25, Y+20	; 0x14
    255c:	98 8b       	std	Y+16, r25	; 0x10
    255e:	8f 87       	std	Y+15, r24	; 0x0f
    2560:	8f 85       	ldd	r24, Y+15	; 0x0f
    2562:	98 89       	ldd	r25, Y+16	; 0x10
    2564:	01 97       	sbiw	r24, 0x01	; 1
    2566:	f1 f7       	brne	.-4      	; 0x2564 <LCD_displayCharacter+0x2e2>
    2568:	98 8b       	std	Y+16, r25	; 0x10
    256a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    256c:	82 e0       	ldi	r24, 0x02	; 2
    256e:	62 e0       	ldi	r22, 0x02	; 2
    2570:	40 e0       	ldi	r20, 0x00	; 0
    2572:	0e 94 de 0b 	call	0x17bc	; 0x17bc <GPIO_writePin>
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	a0 e8       	ldi	r26, 0x80	; 128
    257c:	bf e3       	ldi	r27, 0x3F	; 63
    257e:	8b 87       	std	Y+11, r24	; 0x0b
    2580:	9c 87       	std	Y+12, r25	; 0x0c
    2582:	ad 87       	std	Y+13, r26	; 0x0d
    2584:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2586:	6b 85       	ldd	r22, Y+11	; 0x0b
    2588:	7c 85       	ldd	r23, Y+12	; 0x0c
    258a:	8d 85       	ldd	r24, Y+13	; 0x0d
    258c:	9e 85       	ldd	r25, Y+14	; 0x0e
    258e:	20 e0       	ldi	r18, 0x00	; 0
    2590:	30 e0       	ldi	r19, 0x00	; 0
    2592:	4a ef       	ldi	r20, 0xFA	; 250
    2594:	54 e4       	ldi	r21, 0x44	; 68
    2596:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    259a:	dc 01       	movw	r26, r24
    259c:	cb 01       	movw	r24, r22
    259e:	8f 83       	std	Y+7, r24	; 0x07
    25a0:	98 87       	std	Y+8, r25	; 0x08
    25a2:	a9 87       	std	Y+9, r26	; 0x09
    25a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25a6:	6f 81       	ldd	r22, Y+7	; 0x07
    25a8:	78 85       	ldd	r23, Y+8	; 0x08
    25aa:	89 85       	ldd	r24, Y+9	; 0x09
    25ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	40 e8       	ldi	r20, 0x80	; 128
    25b4:	5f e3       	ldi	r21, 0x3F	; 63
    25b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25ba:	88 23       	and	r24, r24
    25bc:	2c f4       	brge	.+10     	; 0x25c8 <LCD_displayCharacter+0x346>
		__ticks = 1;
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	90 e0       	ldi	r25, 0x00	; 0
    25c2:	9e 83       	std	Y+6, r25	; 0x06
    25c4:	8d 83       	std	Y+5, r24	; 0x05
    25c6:	3f c0       	rjmp	.+126    	; 0x2646 <LCD_displayCharacter+0x3c4>
	else if (__tmp > 65535)
    25c8:	6f 81       	ldd	r22, Y+7	; 0x07
    25ca:	78 85       	ldd	r23, Y+8	; 0x08
    25cc:	89 85       	ldd	r24, Y+9	; 0x09
    25ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	3f ef       	ldi	r19, 0xFF	; 255
    25d4:	4f e7       	ldi	r20, 0x7F	; 127
    25d6:	57 e4       	ldi	r21, 0x47	; 71
    25d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25dc:	18 16       	cp	r1, r24
    25de:	4c f5       	brge	.+82     	; 0x2632 <LCD_displayCharacter+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    25e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    25e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    25e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	40 e2       	ldi	r20, 0x20	; 32
    25ee:	51 e4       	ldi	r21, 0x41	; 65
    25f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25f4:	dc 01       	movw	r26, r24
    25f6:	cb 01       	movw	r24, r22
    25f8:	bc 01       	movw	r22, r24
    25fa:	cd 01       	movw	r24, r26
    25fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	9e 83       	std	Y+6, r25	; 0x06
    2606:	8d 83       	std	Y+5, r24	; 0x05
    2608:	0f c0       	rjmp	.+30     	; 0x2628 <LCD_displayCharacter+0x3a6>
    260a:	88 ec       	ldi	r24, 0xC8	; 200
    260c:	90 e0       	ldi	r25, 0x00	; 0
    260e:	9c 83       	std	Y+4, r25	; 0x04
    2610:	8b 83       	std	Y+3, r24	; 0x03
    2612:	8b 81       	ldd	r24, Y+3	; 0x03
    2614:	9c 81       	ldd	r25, Y+4	; 0x04
    2616:	01 97       	sbiw	r24, 0x01	; 1
    2618:	f1 f7       	brne	.-4      	; 0x2616 <LCD_displayCharacter+0x394>
    261a:	9c 83       	std	Y+4, r25	; 0x04
    261c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    261e:	8d 81       	ldd	r24, Y+5	; 0x05
    2620:	9e 81       	ldd	r25, Y+6	; 0x06
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	9e 83       	std	Y+6, r25	; 0x06
    2626:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2628:	8d 81       	ldd	r24, Y+5	; 0x05
    262a:	9e 81       	ldd	r25, Y+6	; 0x06
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	69 f7       	brne	.-38     	; 0x260a <LCD_displayCharacter+0x388>
    2630:	14 c0       	rjmp	.+40     	; 0x265a <LCD_displayCharacter+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2632:	6f 81       	ldd	r22, Y+7	; 0x07
    2634:	78 85       	ldd	r23, Y+8	; 0x08
    2636:	89 85       	ldd	r24, Y+9	; 0x09
    2638:	9a 85       	ldd	r25, Y+10	; 0x0a
    263a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263e:	dc 01       	movw	r26, r24
    2640:	cb 01       	movw	r24, r22
    2642:	9e 83       	std	Y+6, r25	; 0x06
    2644:	8d 83       	std	Y+5, r24	; 0x05
    2646:	8d 81       	ldd	r24, Y+5	; 0x05
    2648:	9e 81       	ldd	r25, Y+6	; 0x06
    264a:	9a 83       	std	Y+2, r25	; 0x02
    264c:	89 83       	std	Y+1, r24	; 0x01
    264e:	89 81       	ldd	r24, Y+1	; 0x01
    2650:	9a 81       	ldd	r25, Y+2	; 0x02
    2652:	01 97       	sbiw	r24, 0x01	; 1
    2654:	f1 f7       	brne	.-4      	; 0x2652 <LCD_displayCharacter+0x3d0>
    2656:	9a 83       	std	Y+2, r25	; 0x02
    2658:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    265a:	ea 96       	adiw	r28, 0x3a	; 58
    265c:	0f b6       	in	r0, 0x3f	; 63
    265e:	f8 94       	cli
    2660:	de bf       	out	0x3e, r29	; 62
    2662:	0f be       	out	0x3f, r0	; 63
    2664:	cd bf       	out	0x3d, r28	; 61
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    266c:	df 93       	push	r29
    266e:	cf 93       	push	r28
    2670:	00 d0       	rcall	.+0      	; 0x2672 <LCD_displayString+0x6>
    2672:	0f 92       	push	r0
    2674:	cd b7       	in	r28, 0x3d	; 61
    2676:	de b7       	in	r29, 0x3e	; 62
    2678:	9b 83       	std	Y+3, r25	; 0x03
    267a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    267c:	19 82       	std	Y+1, r1	; 0x01
    267e:	0e c0       	rjmp	.+28     	; 0x269c <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2680:	89 81       	ldd	r24, Y+1	; 0x01
    2682:	28 2f       	mov	r18, r24
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	8a 81       	ldd	r24, Y+2	; 0x02
    2688:	9b 81       	ldd	r25, Y+3	; 0x03
    268a:	fc 01       	movw	r30, r24
    268c:	e2 0f       	add	r30, r18
    268e:	f3 1f       	adc	r31, r19
    2690:	80 81       	ld	r24, Z
    2692:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_displayCharacter>
		i++;
    2696:	89 81       	ldd	r24, Y+1	; 0x01
    2698:	8f 5f       	subi	r24, 0xFF	; 255
    269a:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    269c:	89 81       	ldd	r24, Y+1	; 0x01
    269e:	28 2f       	mov	r18, r24
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	8a 81       	ldd	r24, Y+2	; 0x02
    26a4:	9b 81       	ldd	r25, Y+3	; 0x03
    26a6:	fc 01       	movw	r30, r24
    26a8:	e2 0f       	add	r30, r18
    26aa:	f3 1f       	adc	r31, r19
    26ac:	80 81       	ld	r24, Z
    26ae:	88 23       	and	r24, r24
    26b0:	39 f7       	brne	.-50     	; 0x2680 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    26b2:	0f 90       	pop	r0
    26b4:	0f 90       	pop	r0
    26b6:	0f 90       	pop	r0
    26b8:	cf 91       	pop	r28
    26ba:	df 91       	pop	r29
    26bc:	08 95       	ret

000026be <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    26be:	df 93       	push	r29
    26c0:	cf 93       	push	r28
    26c2:	00 d0       	rcall	.+0      	; 0x26c4 <LCD_moveCursor+0x6>
    26c4:	00 d0       	rcall	.+0      	; 0x26c6 <LCD_moveCursor+0x8>
    26c6:	0f 92       	push	r0
    26c8:	cd b7       	in	r28, 0x3d	; 61
    26ca:	de b7       	in	r29, 0x3e	; 62
    26cc:	8a 83       	std	Y+2, r24	; 0x02
    26ce:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    26d0:	8a 81       	ldd	r24, Y+2	; 0x02
    26d2:	28 2f       	mov	r18, r24
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	3d 83       	std	Y+5, r19	; 0x05
    26d8:	2c 83       	std	Y+4, r18	; 0x04
    26da:	8c 81       	ldd	r24, Y+4	; 0x04
    26dc:	9d 81       	ldd	r25, Y+5	; 0x05
    26de:	81 30       	cpi	r24, 0x01	; 1
    26e0:	91 05       	cpc	r25, r1
    26e2:	c1 f0       	breq	.+48     	; 0x2714 <LCD_moveCursor+0x56>
    26e4:	2c 81       	ldd	r18, Y+4	; 0x04
    26e6:	3d 81       	ldd	r19, Y+5	; 0x05
    26e8:	22 30       	cpi	r18, 0x02	; 2
    26ea:	31 05       	cpc	r19, r1
    26ec:	2c f4       	brge	.+10     	; 0x26f8 <LCD_moveCursor+0x3a>
    26ee:	8c 81       	ldd	r24, Y+4	; 0x04
    26f0:	9d 81       	ldd	r25, Y+5	; 0x05
    26f2:	00 97       	sbiw	r24, 0x00	; 0
    26f4:	61 f0       	breq	.+24     	; 0x270e <LCD_moveCursor+0x50>
    26f6:	19 c0       	rjmp	.+50     	; 0x272a <LCD_moveCursor+0x6c>
    26f8:	2c 81       	ldd	r18, Y+4	; 0x04
    26fa:	3d 81       	ldd	r19, Y+5	; 0x05
    26fc:	22 30       	cpi	r18, 0x02	; 2
    26fe:	31 05       	cpc	r19, r1
    2700:	69 f0       	breq	.+26     	; 0x271c <LCD_moveCursor+0x5e>
    2702:	8c 81       	ldd	r24, Y+4	; 0x04
    2704:	9d 81       	ldd	r25, Y+5	; 0x05
    2706:	83 30       	cpi	r24, 0x03	; 3
    2708:	91 05       	cpc	r25, r1
    270a:	61 f0       	breq	.+24     	; 0x2724 <LCD_moveCursor+0x66>
    270c:	0e c0       	rjmp	.+28     	; 0x272a <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    270e:	8b 81       	ldd	r24, Y+3	; 0x03
    2710:	89 83       	std	Y+1, r24	; 0x01
    2712:	0b c0       	rjmp	.+22     	; 0x272a <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2714:	8b 81       	ldd	r24, Y+3	; 0x03
    2716:	80 5c       	subi	r24, 0xC0	; 192
    2718:	89 83       	std	Y+1, r24	; 0x01
    271a:	07 c0       	rjmp	.+14     	; 0x272a <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    271c:	8b 81       	ldd	r24, Y+3	; 0x03
    271e:	80 5f       	subi	r24, 0xF0	; 240
    2720:	89 83       	std	Y+1, r24	; 0x01
    2722:	03 c0       	rjmp	.+6      	; 0x272a <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2724:	8b 81       	ldd	r24, Y+3	; 0x03
    2726:	80 5b       	subi	r24, 0xB0	; 176
    2728:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    272a:	89 81       	ldd	r24, Y+1	; 0x01
    272c:	80 68       	ori	r24, 0x80	; 128
    272e:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_sendCommand>
}
    2732:	0f 90       	pop	r0
    2734:	0f 90       	pop	r0
    2736:	0f 90       	pop	r0
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2742:	df 93       	push	r29
    2744:	cf 93       	push	r28
    2746:	00 d0       	rcall	.+0      	; 0x2748 <LCD_displayStringRowColumn+0x6>
    2748:	00 d0       	rcall	.+0      	; 0x274a <LCD_displayStringRowColumn+0x8>
    274a:	cd b7       	in	r28, 0x3d	; 61
    274c:	de b7       	in	r29, 0x3e	; 62
    274e:	89 83       	std	Y+1, r24	; 0x01
    2750:	6a 83       	std	Y+2, r22	; 0x02
    2752:	5c 83       	std	Y+4, r21	; 0x04
    2754:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2756:	89 81       	ldd	r24, Y+1	; 0x01
    2758:	6a 81       	ldd	r22, Y+2	; 0x02
    275a:	0e 94 5f 13 	call	0x26be	; 0x26be <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    275e:	8b 81       	ldd	r24, Y+3	; 0x03
    2760:	9c 81       	ldd	r25, Y+4	; 0x04
    2762:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>
}
    2766:	0f 90       	pop	r0
    2768:	0f 90       	pop	r0
    276a:	0f 90       	pop	r0
    276c:	0f 90       	pop	r0
    276e:	cf 91       	pop	r28
    2770:	df 91       	pop	r29
    2772:	08 95       	ret

00002774 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2774:	df 93       	push	r29
    2776:	cf 93       	push	r28
    2778:	cd b7       	in	r28, 0x3d	; 61
    277a:	de b7       	in	r29, 0x3e	; 62
    277c:	62 97       	sbiw	r28, 0x12	; 18
    277e:	0f b6       	in	r0, 0x3f	; 63
    2780:	f8 94       	cli
    2782:	de bf       	out	0x3e, r29	; 62
    2784:	0f be       	out	0x3f, r0	; 63
    2786:	cd bf       	out	0x3d, r28	; 61
    2788:	9a 8b       	std	Y+18, r25	; 0x12
    278a:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    278c:	89 89       	ldd	r24, Y+17	; 0x11
    278e:	9a 89       	ldd	r25, Y+18	; 0x12
    2790:	9e 01       	movw	r18, r28
    2792:	2f 5f       	subi	r18, 0xFF	; 255
    2794:	3f 4f       	sbci	r19, 0xFF	; 255
    2796:	b9 01       	movw	r22, r18
    2798:	4a e0       	ldi	r20, 0x0A	; 10
    279a:	50 e0       	ldi	r21, 0x00	; 0
    279c:	0e 94 2b 15 	call	0x2a56	; 0x2a56 <itoa>
   LCD_displayString(buff); /* Display the string */
    27a0:	ce 01       	movw	r24, r28
    27a2:	01 96       	adiw	r24, 0x01	; 1
    27a4:	0e 94 36 13 	call	0x266c	; 0x266c <LCD_displayString>
}
    27a8:	62 96       	adiw	r28, 0x12	; 18
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    27c2:	81 e0       	ldi	r24, 0x01	; 1
    27c4:	0e 94 4c 0f 	call	0x1e98	; 0x1e98 <LCD_sendCommand>
}
    27c8:	cf 91       	pop	r28
    27ca:	df 91       	pop	r29
    27cc:	08 95       	ret

000027ce <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_config* config)
{
    27ce:	df 93       	push	r29
    27d0:	cf 93       	push	r28
    27d2:	00 d0       	rcall	.+0      	; 0x27d4 <UART_init+0x6>
    27d4:	00 d0       	rcall	.+0      	; 0x27d6 <UART_init+0x8>
    27d6:	cd b7       	in	r28, 0x3d	; 61
    27d8:	de b7       	in	r29, 0x3e	; 62
    27da:	9c 83       	std	Y+4, r25	; 0x04
    27dc:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    27de:	1a 82       	std	Y+2, r1	; 0x02
    27e0:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    27e2:	eb e2       	ldi	r30, 0x2B	; 43
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	82 e0       	ldi	r24, 0x02	; 2
    27e8:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    27ea:	ea e2       	ldi	r30, 0x2A	; 42
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	88 e1       	ldi	r24, 0x18	; 24
    27f0:	80 83       	st	Z, r24
	 * UPM1:0  = Parity from Configuration
	 * USBS    = Stop Bit Count from Configuration
	 * UCSZ1:0 = Data Size from Configuration
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1) | (config -> parity) | (config -> stopBits) | ((config -> dataSize) - 5);
    27f2:	a0 e4       	ldi	r26, 0x40	; 64
    27f4:	b0 e0       	ldi	r27, 0x00	; 0
    27f6:	eb 81       	ldd	r30, Y+3	; 0x03
    27f8:	fc 81       	ldd	r31, Y+4	; 0x04
    27fa:	95 81       	ldd	r25, Z+5	; 0x05
    27fc:	eb 81       	ldd	r30, Y+3	; 0x03
    27fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2800:	84 81       	ldd	r24, Z+4	; 0x04
    2802:	89 2b       	or	r24, r25
    2804:	86 68       	ori	r24, 0x86	; 134
    2806:	98 2f       	mov	r25, r24
    2808:	eb 81       	ldd	r30, Y+3	; 0x03
    280a:	fc 81       	ldd	r31, Y+4	; 0x04
    280c:	86 81       	ldd	r24, Z+6	; 0x06
    280e:	85 50       	subi	r24, 0x05	; 5
    2810:	89 2b       	or	r24, r25
    2812:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config -> baudRate * 8UL))) - 1);
    2814:	eb 81       	ldd	r30, Y+3	; 0x03
    2816:	fc 81       	ldd	r31, Y+4	; 0x04
    2818:	80 81       	ld	r24, Z
    281a:	91 81       	ldd	r25, Z+1	; 0x01
    281c:	a2 81       	ldd	r26, Z+2	; 0x02
    281e:	b3 81       	ldd	r27, Z+3	; 0x03
    2820:	88 0f       	add	r24, r24
    2822:	99 1f       	adc	r25, r25
    2824:	aa 1f       	adc	r26, r26
    2826:	bb 1f       	adc	r27, r27
    2828:	88 0f       	add	r24, r24
    282a:	99 1f       	adc	r25, r25
    282c:	aa 1f       	adc	r26, r26
    282e:	bb 1f       	adc	r27, r27
    2830:	88 0f       	add	r24, r24
    2832:	99 1f       	adc	r25, r25
    2834:	aa 1f       	adc	r26, r26
    2836:	bb 1f       	adc	r27, r27
    2838:	9c 01       	movw	r18, r24
    283a:	ad 01       	movw	r20, r26
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	92 e1       	ldi	r25, 0x12	; 18
    2840:	aa e7       	ldi	r26, 0x7A	; 122
    2842:	b0 e0       	ldi	r27, 0x00	; 0
    2844:	bc 01       	movw	r22, r24
    2846:	cd 01       	movw	r24, r26
    2848:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <__udivmodsi4>
    284c:	da 01       	movw	r26, r20
    284e:	c9 01       	movw	r24, r18
    2850:	01 97       	sbiw	r24, 0x01	; 1
    2852:	9a 83       	std	Y+2, r25	; 0x02
    2854:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2856:	e0 e4       	ldi	r30, 0x40	; 64
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	89 81       	ldd	r24, Y+1	; 0x01
    285c:	9a 81       	ldd	r25, Y+2	; 0x02
    285e:	89 2f       	mov	r24, r25
    2860:	99 27       	eor	r25, r25
    2862:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2864:	e9 e2       	ldi	r30, 0x29	; 41
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	80 83       	st	Z, r24
}
    286c:	0f 90       	pop	r0
    286e:	0f 90       	pop	r0
    2870:	0f 90       	pop	r0
    2872:	0f 90       	pop	r0
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	0f 92       	push	r0
    2880:	cd b7       	in	r28, 0x3d	; 61
    2882:	de b7       	in	r29, 0x3e	; 62
    2884:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2886:	eb e2       	ldi	r30, 0x2B	; 43
    2888:	f0 e0       	ldi	r31, 0x00	; 0
    288a:	80 81       	ld	r24, Z
    288c:	88 2f       	mov	r24, r24
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	80 72       	andi	r24, 0x20	; 32
    2892:	90 70       	andi	r25, 0x00	; 0
    2894:	00 97       	sbiw	r24, 0x00	; 0
    2896:	b9 f3       	breq	.-18     	; 0x2886 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2898:	ec e2       	ldi	r30, 0x2C	; 44
    289a:	f0 e0       	ldi	r31, 0x00	; 0
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    28a0:	0f 90       	pop	r0
    28a2:	cf 91       	pop	r28
    28a4:	df 91       	pop	r29
    28a6:	08 95       	ret

000028a8 <UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_receiveByte(void)
{
    28a8:	df 93       	push	r29
    28aa:	cf 93       	push	r28
    28ac:	cd b7       	in	r28, 0x3d	; 61
    28ae:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    28b0:	eb e2       	ldi	r30, 0x2B	; 43
    28b2:	f0 e0       	ldi	r31, 0x00	; 0
    28b4:	80 81       	ld	r24, Z
    28b6:	88 23       	and	r24, r24
    28b8:	dc f7       	brge	.-10     	; 0x28b0 <UART_receiveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    28ba:	ec e2       	ldi	r30, 0x2C	; 44
    28bc:	f0 e0       	ldi	r31, 0x00	; 0
    28be:	80 81       	ld	r24, Z
}
    28c0:	cf 91       	pop	r28
    28c2:	df 91       	pop	r29
    28c4:	08 95       	ret

000028c6 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    28c6:	df 93       	push	r29
    28c8:	cf 93       	push	r28
    28ca:	00 d0       	rcall	.+0      	; 0x28cc <UART_sendString+0x6>
    28cc:	0f 92       	push	r0
    28ce:	cd b7       	in	r28, 0x3d	; 61
    28d0:	de b7       	in	r29, 0x3e	; 62
    28d2:	9b 83       	std	Y+3, r25	; 0x03
    28d4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    28d6:	19 82       	std	Y+1, r1	; 0x01
    28d8:	0e c0       	rjmp	.+28     	; 0x28f6 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    28da:	89 81       	ldd	r24, Y+1	; 0x01
    28dc:	28 2f       	mov	r18, r24
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	8a 81       	ldd	r24, Y+2	; 0x02
    28e2:	9b 81       	ldd	r25, Y+3	; 0x03
    28e4:	fc 01       	movw	r30, r24
    28e6:	e2 0f       	add	r30, r18
    28e8:	f3 1f       	adc	r31, r19
    28ea:	80 81       	ld	r24, Z
    28ec:	0e 94 3d 14 	call	0x287a	; 0x287a <UART_sendByte>
		i++;
    28f0:	89 81       	ldd	r24, Y+1	; 0x01
    28f2:	8f 5f       	subi	r24, 0xFF	; 255
    28f4:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    28f6:	89 81       	ldd	r24, Y+1	; 0x01
    28f8:	28 2f       	mov	r18, r24
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	8a 81       	ldd	r24, Y+2	; 0x02
    28fe:	9b 81       	ldd	r25, Y+3	; 0x03
    2900:	fc 01       	movw	r30, r24
    2902:	e2 0f       	add	r30, r18
    2904:	f3 1f       	adc	r31, r19
    2906:	80 81       	ld	r24, Z
    2908:	88 23       	and	r24, r24
    290a:	39 f7       	brne	.-50     	; 0x28da <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

	UART_sendByte('#');
    290c:	83 e2       	ldi	r24, 0x23	; 35
    290e:	0e 94 3d 14 	call	0x287a	; 0x287a <UART_sendByte>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2912:	0f 90       	pop	r0
    2914:	0f 90       	pop	r0
    2916:	0f 90       	pop	r0
    2918:	cf 91       	pop	r28
    291a:	df 91       	pop	r29
    291c:	08 95       	ret

0000291e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    291e:	0f 93       	push	r16
    2920:	1f 93       	push	r17
    2922:	df 93       	push	r29
    2924:	cf 93       	push	r28
    2926:	00 d0       	rcall	.+0      	; 0x2928 <UART_receiveString+0xa>
    2928:	0f 92       	push	r0
    292a:	cd b7       	in	r28, 0x3d	; 61
    292c:	de b7       	in	r29, 0x3e	; 62
    292e:	9b 83       	std	Y+3, r25	; 0x03
    2930:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2932:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_receiveByte();
    2934:	89 81       	ldd	r24, Y+1	; 0x01
    2936:	28 2f       	mov	r18, r24
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	8a 81       	ldd	r24, Y+2	; 0x02
    293c:	9b 81       	ldd	r25, Y+3	; 0x03
    293e:	8c 01       	movw	r16, r24
    2940:	02 0f       	add	r16, r18
    2942:	13 1f       	adc	r17, r19
    2944:	0e 94 54 14 	call	0x28a8	; 0x28a8 <UART_receiveByte>
    2948:	f8 01       	movw	r30, r16
    294a:	80 83       	st	Z, r24
    294c:	0f c0       	rjmp	.+30     	; 0x296c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	8f 5f       	subi	r24, 0xFF	; 255
    2952:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_receiveByte();
    2954:	89 81       	ldd	r24, Y+1	; 0x01
    2956:	28 2f       	mov	r18, r24
    2958:	30 e0       	ldi	r19, 0x00	; 0
    295a:	8a 81       	ldd	r24, Y+2	; 0x02
    295c:	9b 81       	ldd	r25, Y+3	; 0x03
    295e:	8c 01       	movw	r16, r24
    2960:	02 0f       	add	r16, r18
    2962:	13 1f       	adc	r17, r19
    2964:	0e 94 54 14 	call	0x28a8	; 0x28a8 <UART_receiveByte>
    2968:	f8 01       	movw	r30, r16
    296a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_receiveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    296c:	89 81       	ldd	r24, Y+1	; 0x01
    296e:	28 2f       	mov	r18, r24
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	8a 81       	ldd	r24, Y+2	; 0x02
    2974:	9b 81       	ldd	r25, Y+3	; 0x03
    2976:	fc 01       	movw	r30, r24
    2978:	e2 0f       	add	r30, r18
    297a:	f3 1f       	adc	r31, r19
    297c:	80 81       	ld	r24, Z
    297e:	83 32       	cpi	r24, 0x23	; 35
    2980:	31 f7       	brne	.-52     	; 0x294e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_receiveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2982:	89 81       	ldd	r24, Y+1	; 0x01
    2984:	28 2f       	mov	r18, r24
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	8a 81       	ldd	r24, Y+2	; 0x02
    298a:	9b 81       	ldd	r25, Y+3	; 0x03
    298c:	fc 01       	movw	r30, r24
    298e:	e2 0f       	add	r30, r18
    2990:	f3 1f       	adc	r31, r19
    2992:	10 82       	st	Z, r1
}
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	cf 91       	pop	r28
    299c:	df 91       	pop	r29
    299e:	1f 91       	pop	r17
    29a0:	0f 91       	pop	r16
    29a2:	08 95       	ret

000029a4 <__udivmodsi4>:
    29a4:	a1 e2       	ldi	r26, 0x21	; 33
    29a6:	1a 2e       	mov	r1, r26
    29a8:	aa 1b       	sub	r26, r26
    29aa:	bb 1b       	sub	r27, r27
    29ac:	fd 01       	movw	r30, r26
    29ae:	0d c0       	rjmp	.+26     	; 0x29ca <__udivmodsi4_ep>

000029b0 <__udivmodsi4_loop>:
    29b0:	aa 1f       	adc	r26, r26
    29b2:	bb 1f       	adc	r27, r27
    29b4:	ee 1f       	adc	r30, r30
    29b6:	ff 1f       	adc	r31, r31
    29b8:	a2 17       	cp	r26, r18
    29ba:	b3 07       	cpc	r27, r19
    29bc:	e4 07       	cpc	r30, r20
    29be:	f5 07       	cpc	r31, r21
    29c0:	20 f0       	brcs	.+8      	; 0x29ca <__udivmodsi4_ep>
    29c2:	a2 1b       	sub	r26, r18
    29c4:	b3 0b       	sbc	r27, r19
    29c6:	e4 0b       	sbc	r30, r20
    29c8:	f5 0b       	sbc	r31, r21

000029ca <__udivmodsi4_ep>:
    29ca:	66 1f       	adc	r22, r22
    29cc:	77 1f       	adc	r23, r23
    29ce:	88 1f       	adc	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	1a 94       	dec	r1
    29d4:	69 f7       	brne	.-38     	; 0x29b0 <__udivmodsi4_loop>
    29d6:	60 95       	com	r22
    29d8:	70 95       	com	r23
    29da:	80 95       	com	r24
    29dc:	90 95       	com	r25
    29de:	9b 01       	movw	r18, r22
    29e0:	ac 01       	movw	r20, r24
    29e2:	bd 01       	movw	r22, r26
    29e4:	cf 01       	movw	r24, r30
    29e6:	08 95       	ret

000029e8 <__prologue_saves__>:
    29e8:	2f 92       	push	r2
    29ea:	3f 92       	push	r3
    29ec:	4f 92       	push	r4
    29ee:	5f 92       	push	r5
    29f0:	6f 92       	push	r6
    29f2:	7f 92       	push	r7
    29f4:	8f 92       	push	r8
    29f6:	9f 92       	push	r9
    29f8:	af 92       	push	r10
    29fa:	bf 92       	push	r11
    29fc:	cf 92       	push	r12
    29fe:	df 92       	push	r13
    2a00:	ef 92       	push	r14
    2a02:	ff 92       	push	r15
    2a04:	0f 93       	push	r16
    2a06:	1f 93       	push	r17
    2a08:	cf 93       	push	r28
    2a0a:	df 93       	push	r29
    2a0c:	cd b7       	in	r28, 0x3d	; 61
    2a0e:	de b7       	in	r29, 0x3e	; 62
    2a10:	ca 1b       	sub	r28, r26
    2a12:	db 0b       	sbc	r29, r27
    2a14:	0f b6       	in	r0, 0x3f	; 63
    2a16:	f8 94       	cli
    2a18:	de bf       	out	0x3e, r29	; 62
    2a1a:	0f be       	out	0x3f, r0	; 63
    2a1c:	cd bf       	out	0x3d, r28	; 61
    2a1e:	09 94       	ijmp

00002a20 <__epilogue_restores__>:
    2a20:	2a 88       	ldd	r2, Y+18	; 0x12
    2a22:	39 88       	ldd	r3, Y+17	; 0x11
    2a24:	48 88       	ldd	r4, Y+16	; 0x10
    2a26:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a28:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a2a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a2c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a2e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a30:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a32:	b9 84       	ldd	r11, Y+9	; 0x09
    2a34:	c8 84       	ldd	r12, Y+8	; 0x08
    2a36:	df 80       	ldd	r13, Y+7	; 0x07
    2a38:	ee 80       	ldd	r14, Y+6	; 0x06
    2a3a:	fd 80       	ldd	r15, Y+5	; 0x05
    2a3c:	0c 81       	ldd	r16, Y+4	; 0x04
    2a3e:	1b 81       	ldd	r17, Y+3	; 0x03
    2a40:	aa 81       	ldd	r26, Y+2	; 0x02
    2a42:	b9 81       	ldd	r27, Y+1	; 0x01
    2a44:	ce 0f       	add	r28, r30
    2a46:	d1 1d       	adc	r29, r1
    2a48:	0f b6       	in	r0, 0x3f	; 63
    2a4a:	f8 94       	cli
    2a4c:	de bf       	out	0x3e, r29	; 62
    2a4e:	0f be       	out	0x3f, r0	; 63
    2a50:	cd bf       	out	0x3d, r28	; 61
    2a52:	ed 01       	movw	r28, r26
    2a54:	08 95       	ret

00002a56 <itoa>:
    2a56:	fb 01       	movw	r30, r22
    2a58:	9f 01       	movw	r18, r30
    2a5a:	e8 94       	clt
    2a5c:	42 30       	cpi	r20, 0x02	; 2
    2a5e:	c4 f0       	brlt	.+48     	; 0x2a90 <itoa+0x3a>
    2a60:	45 32       	cpi	r20, 0x25	; 37
    2a62:	b4 f4       	brge	.+44     	; 0x2a90 <itoa+0x3a>
    2a64:	4a 30       	cpi	r20, 0x0A	; 10
    2a66:	29 f4       	brne	.+10     	; 0x2a72 <itoa+0x1c>
    2a68:	97 fb       	bst	r25, 7
    2a6a:	1e f4       	brtc	.+6      	; 0x2a72 <itoa+0x1c>
    2a6c:	90 95       	com	r25
    2a6e:	81 95       	neg	r24
    2a70:	9f 4f       	sbci	r25, 0xFF	; 255
    2a72:	64 2f       	mov	r22, r20
    2a74:	77 27       	eor	r23, r23
    2a76:	0e 94 5c 15 	call	0x2ab8	; 0x2ab8 <__udivmodhi4>
    2a7a:	80 5d       	subi	r24, 0xD0	; 208
    2a7c:	8a 33       	cpi	r24, 0x3A	; 58
    2a7e:	0c f0       	brlt	.+2      	; 0x2a82 <itoa+0x2c>
    2a80:	89 5d       	subi	r24, 0xD9	; 217
    2a82:	81 93       	st	Z+, r24
    2a84:	cb 01       	movw	r24, r22
    2a86:	00 97       	sbiw	r24, 0x00	; 0
    2a88:	a1 f7       	brne	.-24     	; 0x2a72 <itoa+0x1c>
    2a8a:	16 f4       	brtc	.+4      	; 0x2a90 <itoa+0x3a>
    2a8c:	5d e2       	ldi	r21, 0x2D	; 45
    2a8e:	51 93       	st	Z+, r21
    2a90:	10 82       	st	Z, r1
    2a92:	c9 01       	movw	r24, r18
    2a94:	0c 94 4c 15 	jmp	0x2a98	; 0x2a98 <strrev>

00002a98 <strrev>:
    2a98:	dc 01       	movw	r26, r24
    2a9a:	fc 01       	movw	r30, r24
    2a9c:	67 2f       	mov	r22, r23
    2a9e:	71 91       	ld	r23, Z+
    2aa0:	77 23       	and	r23, r23
    2aa2:	e1 f7       	brne	.-8      	; 0x2a9c <strrev+0x4>
    2aa4:	32 97       	sbiw	r30, 0x02	; 2
    2aa6:	04 c0       	rjmp	.+8      	; 0x2ab0 <strrev+0x18>
    2aa8:	7c 91       	ld	r23, X
    2aaa:	6d 93       	st	X+, r22
    2aac:	70 83       	st	Z, r23
    2aae:	62 91       	ld	r22, -Z
    2ab0:	ae 17       	cp	r26, r30
    2ab2:	bf 07       	cpc	r27, r31
    2ab4:	c8 f3       	brcs	.-14     	; 0x2aa8 <strrev+0x10>
    2ab6:	08 95       	ret

00002ab8 <__udivmodhi4>:
    2ab8:	aa 1b       	sub	r26, r26
    2aba:	bb 1b       	sub	r27, r27
    2abc:	51 e1       	ldi	r21, 0x11	; 17
    2abe:	07 c0       	rjmp	.+14     	; 0x2ace <__udivmodhi4_ep>

00002ac0 <__udivmodhi4_loop>:
    2ac0:	aa 1f       	adc	r26, r26
    2ac2:	bb 1f       	adc	r27, r27
    2ac4:	a6 17       	cp	r26, r22
    2ac6:	b7 07       	cpc	r27, r23
    2ac8:	10 f0       	brcs	.+4      	; 0x2ace <__udivmodhi4_ep>
    2aca:	a6 1b       	sub	r26, r22
    2acc:	b7 0b       	sbc	r27, r23

00002ace <__udivmodhi4_ep>:
    2ace:	88 1f       	adc	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	5a 95       	dec	r21
    2ad4:	a9 f7       	brne	.-22     	; 0x2ac0 <__udivmodhi4_loop>
    2ad6:	80 95       	com	r24
    2ad8:	90 95       	com	r25
    2ada:	bc 01       	movw	r22, r24
    2adc:	cd 01       	movw	r24, r26
    2ade:	08 95       	ret

00002ae0 <_exit>:
    2ae0:	f8 94       	cli

00002ae2 <__stop_program>:
    2ae2:	ff cf       	rjmp	.-2      	; 0x2ae2 <__stop_program>
